// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.6
// source: modal_proto/api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModalClient_AppClientDisconnect_FullMethodName              = "/modal.client.ModalClient/AppClientDisconnect"
	ModalClient_AppCreate_FullMethodName                        = "/modal.client.ModalClient/AppCreate"
	ModalClient_AppDeploy_FullMethodName                        = "/modal.client.ModalClient/AppDeploy"
	ModalClient_AppDeploymentHistory_FullMethodName             = "/modal.client.ModalClient/AppDeploymentHistory"
	ModalClient_AppGetByDeploymentName_FullMethodName           = "/modal.client.ModalClient/AppGetByDeploymentName"
	ModalClient_AppGetLayout_FullMethodName                     = "/modal.client.ModalClient/AppGetLayout"
	ModalClient_AppGetLogs_FullMethodName                       = "/modal.client.ModalClient/AppGetLogs"
	ModalClient_AppGetObjects_FullMethodName                    = "/modal.client.ModalClient/AppGetObjects"
	ModalClient_AppGetOrCreate_FullMethodName                   = "/modal.client.ModalClient/AppGetOrCreate"
	ModalClient_AppHeartbeat_FullMethodName                     = "/modal.client.ModalClient/AppHeartbeat"
	ModalClient_AppList_FullMethodName                          = "/modal.client.ModalClient/AppList"
	ModalClient_AppLookup_FullMethodName                        = "/modal.client.ModalClient/AppLookup"
	ModalClient_AppPublish_FullMethodName                       = "/modal.client.ModalClient/AppPublish"
	ModalClient_AppRollback_FullMethodName                      = "/modal.client.ModalClient/AppRollback"
	ModalClient_AppSetObjects_FullMethodName                    = "/modal.client.ModalClient/AppSetObjects"
	ModalClient_AppStop_FullMethodName                          = "/modal.client.ModalClient/AppStop"
	ModalClient_AttemptAwait_FullMethodName                     = "/modal.client.ModalClient/AttemptAwait"
	ModalClient_AttemptStart_FullMethodName                     = "/modal.client.ModalClient/AttemptStart"
	ModalClient_BlobCreate_FullMethodName                       = "/modal.client.ModalClient/BlobCreate"
	ModalClient_BlobGet_FullMethodName                          = "/modal.client.ModalClient/BlobGet"
	ModalClient_ClassCreate_FullMethodName                      = "/modal.client.ModalClient/ClassCreate"
	ModalClient_ClassGet_FullMethodName                         = "/modal.client.ModalClient/ClassGet"
	ModalClient_ClientHello_FullMethodName                      = "/modal.client.ModalClient/ClientHello"
	ModalClient_ClusterGet_FullMethodName                       = "/modal.client.ModalClient/ClusterGet"
	ModalClient_ClusterList_FullMethodName                      = "/modal.client.ModalClient/ClusterList"
	ModalClient_ContainerCheckpoint_FullMethodName              = "/modal.client.ModalClient/ContainerCheckpoint"
	ModalClient_ContainerExec_FullMethodName                    = "/modal.client.ModalClient/ContainerExec"
	ModalClient_ContainerExecGetOutput_FullMethodName           = "/modal.client.ModalClient/ContainerExecGetOutput"
	ModalClient_ContainerExecPutInput_FullMethodName            = "/modal.client.ModalClient/ContainerExecPutInput"
	ModalClient_ContainerExecWait_FullMethodName                = "/modal.client.ModalClient/ContainerExecWait"
	ModalClient_ContainerFilesystemExec_FullMethodName          = "/modal.client.ModalClient/ContainerFilesystemExec"
	ModalClient_ContainerFilesystemExecGetOutput_FullMethodName = "/modal.client.ModalClient/ContainerFilesystemExecGetOutput"
	ModalClient_ContainerHeartbeat_FullMethodName               = "/modal.client.ModalClient/ContainerHeartbeat"
	ModalClient_ContainerHello_FullMethodName                   = "/modal.client.ModalClient/ContainerHello"
	ModalClient_ContainerLog_FullMethodName                     = "/modal.client.ModalClient/ContainerLog"
	ModalClient_ContainerStop_FullMethodName                    = "/modal.client.ModalClient/ContainerStop"
	ModalClient_DictClear_FullMethodName                        = "/modal.client.ModalClient/DictClear"
	ModalClient_DictContains_FullMethodName                     = "/modal.client.ModalClient/DictContains"
	ModalClient_DictContents_FullMethodName                     = "/modal.client.ModalClient/DictContents"
	ModalClient_DictDelete_FullMethodName                       = "/modal.client.ModalClient/DictDelete"
	ModalClient_DictGet_FullMethodName                          = "/modal.client.ModalClient/DictGet"
	ModalClient_DictGetOrCreate_FullMethodName                  = "/modal.client.ModalClient/DictGetOrCreate"
	ModalClient_DictHeartbeat_FullMethodName                    = "/modal.client.ModalClient/DictHeartbeat"
	ModalClient_DictLen_FullMethodName                          = "/modal.client.ModalClient/DictLen"
	ModalClient_DictList_FullMethodName                         = "/modal.client.ModalClient/DictList"
	ModalClient_DictPop_FullMethodName                          = "/modal.client.ModalClient/DictPop"
	ModalClient_DictUpdate_FullMethodName                       = "/modal.client.ModalClient/DictUpdate"
	ModalClient_DomainCertificateVerify_FullMethodName          = "/modal.client.ModalClient/DomainCertificateVerify"
	ModalClient_DomainCreate_FullMethodName                     = "/modal.client.ModalClient/DomainCreate"
	ModalClient_DomainList_FullMethodName                       = "/modal.client.ModalClient/DomainList"
	ModalClient_EnvironmentCreate_FullMethodName                = "/modal.client.ModalClient/EnvironmentCreate"
	ModalClient_EnvironmentDelete_FullMethodName                = "/modal.client.ModalClient/EnvironmentDelete"
	ModalClient_EnvironmentGetOrCreate_FullMethodName           = "/modal.client.ModalClient/EnvironmentGetOrCreate"
	ModalClient_EnvironmentList_FullMethodName                  = "/modal.client.ModalClient/EnvironmentList"
	ModalClient_EnvironmentUpdate_FullMethodName                = "/modal.client.ModalClient/EnvironmentUpdate"
	ModalClient_FunctionAsyncInvoke_FullMethodName              = "/modal.client.ModalClient/FunctionAsyncInvoke"
	ModalClient_FunctionBindParams_FullMethodName               = "/modal.client.ModalClient/FunctionBindParams"
	ModalClient_FunctionCallCancel_FullMethodName               = "/modal.client.ModalClient/FunctionCallCancel"
	ModalClient_FunctionCallGetDataIn_FullMethodName            = "/modal.client.ModalClient/FunctionCallGetDataIn"
	ModalClient_FunctionCallGetDataOut_FullMethodName           = "/modal.client.ModalClient/FunctionCallGetDataOut"
	ModalClient_FunctionCallList_FullMethodName                 = "/modal.client.ModalClient/FunctionCallList"
	ModalClient_FunctionCallPutDataOut_FullMethodName           = "/modal.client.ModalClient/FunctionCallPutDataOut"
	ModalClient_FunctionCreate_FullMethodName                   = "/modal.client.ModalClient/FunctionCreate"
	ModalClient_FunctionGet_FullMethodName                      = "/modal.client.ModalClient/FunctionGet"
	ModalClient_FunctionGetCallGraph_FullMethodName             = "/modal.client.ModalClient/FunctionGetCallGraph"
	ModalClient_FunctionGetCurrentStats_FullMethodName          = "/modal.client.ModalClient/FunctionGetCurrentStats"
	ModalClient_FunctionGetDynamicConcurrency_FullMethodName    = "/modal.client.ModalClient/FunctionGetDynamicConcurrency"
	ModalClient_FunctionGetInputs_FullMethodName                = "/modal.client.ModalClient/FunctionGetInputs"
	ModalClient_FunctionGetOutputs_FullMethodName               = "/modal.client.ModalClient/FunctionGetOutputs"
	ModalClient_FunctionGetSerialized_FullMethodName            = "/modal.client.ModalClient/FunctionGetSerialized"
	ModalClient_FunctionMap_FullMethodName                      = "/modal.client.ModalClient/FunctionMap"
	ModalClient_FunctionPrecreate_FullMethodName                = "/modal.client.ModalClient/FunctionPrecreate"
	ModalClient_FunctionPutInputs_FullMethodName                = "/modal.client.ModalClient/FunctionPutInputs"
	ModalClient_FunctionPutOutputs_FullMethodName               = "/modal.client.ModalClient/FunctionPutOutputs"
	ModalClient_FunctionRetryInputs_FullMethodName              = "/modal.client.ModalClient/FunctionRetryInputs"
	ModalClient_FunctionStartPtyShell_FullMethodName            = "/modal.client.ModalClient/FunctionStartPtyShell"
	ModalClient_FunctionUpdateSchedulingParams_FullMethodName   = "/modal.client.ModalClient/FunctionUpdateSchedulingParams"
	ModalClient_ImageFromId_FullMethodName                      = "/modal.client.ModalClient/ImageFromId"
	ModalClient_ImageGetOrCreate_FullMethodName                 = "/modal.client.ModalClient/ImageGetOrCreate"
	ModalClient_ImageJoinStreaming_FullMethodName               = "/modal.client.ModalClient/ImageJoinStreaming"
	ModalClient_MountGetOrCreate_FullMethodName                 = "/modal.client.ModalClient/MountGetOrCreate"
	ModalClient_MountPutFile_FullMethodName                     = "/modal.client.ModalClient/MountPutFile"
	ModalClient_NotebookKernelPublishResults_FullMethodName     = "/modal.client.ModalClient/NotebookKernelPublishResults"
	ModalClient_ProxyAddIp_FullMethodName                       = "/modal.client.ModalClient/ProxyAddIp"
	ModalClient_ProxyCreate_FullMethodName                      = "/modal.client.ModalClient/ProxyCreate"
	ModalClient_ProxyDelete_FullMethodName                      = "/modal.client.ModalClient/ProxyDelete"
	ModalClient_ProxyGet_FullMethodName                         = "/modal.client.ModalClient/ProxyGet"
	ModalClient_ProxyGetOrCreate_FullMethodName                 = "/modal.client.ModalClient/ProxyGetOrCreate"
	ModalClient_ProxyList_FullMethodName                        = "/modal.client.ModalClient/ProxyList"
	ModalClient_ProxyRemoveIp_FullMethodName                    = "/modal.client.ModalClient/ProxyRemoveIp"
	ModalClient_QueueClear_FullMethodName                       = "/modal.client.ModalClient/QueueClear"
	ModalClient_QueueDelete_FullMethodName                      = "/modal.client.ModalClient/QueueDelete"
	ModalClient_QueueGet_FullMethodName                         = "/modal.client.ModalClient/QueueGet"
	ModalClient_QueueGetOrCreate_FullMethodName                 = "/modal.client.ModalClient/QueueGetOrCreate"
	ModalClient_QueueHeartbeat_FullMethodName                   = "/modal.client.ModalClient/QueueHeartbeat"
	ModalClient_QueueLen_FullMethodName                         = "/modal.client.ModalClient/QueueLen"
	ModalClient_QueueList_FullMethodName                        = "/modal.client.ModalClient/QueueList"
	ModalClient_QueueNextItems_FullMethodName                   = "/modal.client.ModalClient/QueueNextItems"
	ModalClient_QueuePut_FullMethodName                         = "/modal.client.ModalClient/QueuePut"
	ModalClient_SandboxCreate_FullMethodName                    = "/modal.client.ModalClient/SandboxCreate"
	ModalClient_SandboxGetLogs_FullMethodName                   = "/modal.client.ModalClient/SandboxGetLogs"
	ModalClient_SandboxGetResourceUsage_FullMethodName          = "/modal.client.ModalClient/SandboxGetResourceUsage"
	ModalClient_SandboxGetTaskId_FullMethodName                 = "/modal.client.ModalClient/SandboxGetTaskId"
	ModalClient_SandboxGetTunnels_FullMethodName                = "/modal.client.ModalClient/SandboxGetTunnels"
	ModalClient_SandboxList_FullMethodName                      = "/modal.client.ModalClient/SandboxList"
	ModalClient_SandboxRestore_FullMethodName                   = "/modal.client.ModalClient/SandboxRestore"
	ModalClient_SandboxSnapshot_FullMethodName                  = "/modal.client.ModalClient/SandboxSnapshot"
	ModalClient_SandboxSnapshotFs_FullMethodName                = "/modal.client.ModalClient/SandboxSnapshotFs"
	ModalClient_SandboxSnapshotGet_FullMethodName               = "/modal.client.ModalClient/SandboxSnapshotGet"
	ModalClient_SandboxSnapshotWait_FullMethodName              = "/modal.client.ModalClient/SandboxSnapshotWait"
	ModalClient_SandboxStdinWrite_FullMethodName                = "/modal.client.ModalClient/SandboxStdinWrite"
	ModalClient_SandboxTagsSet_FullMethodName                   = "/modal.client.ModalClient/SandboxTagsSet"
	ModalClient_SandboxTerminate_FullMethodName                 = "/modal.client.ModalClient/SandboxTerminate"
	ModalClient_SandboxWait_FullMethodName                      = "/modal.client.ModalClient/SandboxWait"
	ModalClient_SecretDelete_FullMethodName                     = "/modal.client.ModalClient/SecretDelete"
	ModalClient_SecretGetOrCreate_FullMethodName                = "/modal.client.ModalClient/SecretGetOrCreate"
	ModalClient_SecretList_FullMethodName                       = "/modal.client.ModalClient/SecretList"
	ModalClient_SharedVolumeDelete_FullMethodName               = "/modal.client.ModalClient/SharedVolumeDelete"
	ModalClient_SharedVolumeGetFile_FullMethodName              = "/modal.client.ModalClient/SharedVolumeGetFile"
	ModalClient_SharedVolumeGetOrCreate_FullMethodName          = "/modal.client.ModalClient/SharedVolumeGetOrCreate"
	ModalClient_SharedVolumeHeartbeat_FullMethodName            = "/modal.client.ModalClient/SharedVolumeHeartbeat"
	ModalClient_SharedVolumeList_FullMethodName                 = "/modal.client.ModalClient/SharedVolumeList"
	ModalClient_SharedVolumeListFiles_FullMethodName            = "/modal.client.ModalClient/SharedVolumeListFiles"
	ModalClient_SharedVolumeListFilesStream_FullMethodName      = "/modal.client.ModalClient/SharedVolumeListFilesStream"
	ModalClient_SharedVolumePutFile_FullMethodName              = "/modal.client.ModalClient/SharedVolumePutFile"
	ModalClient_SharedVolumeRemoveFile_FullMethodName           = "/modal.client.ModalClient/SharedVolumeRemoveFile"
	ModalClient_TaskClusterHello_FullMethodName                 = "/modal.client.ModalClient/TaskClusterHello"
	ModalClient_TaskCurrentInputs_FullMethodName                = "/modal.client.ModalClient/TaskCurrentInputs"
	ModalClient_TaskList_FullMethodName                         = "/modal.client.ModalClient/TaskList"
	ModalClient_TaskResult_FullMethodName                       = "/modal.client.ModalClient/TaskResult"
	ModalClient_TokenFlowCreate_FullMethodName                  = "/modal.client.ModalClient/TokenFlowCreate"
	ModalClient_TokenFlowWait_FullMethodName                    = "/modal.client.ModalClient/TokenFlowWait"
	ModalClient_TunnelStart_FullMethodName                      = "/modal.client.ModalClient/TunnelStart"
	ModalClient_TunnelStop_FullMethodName                       = "/modal.client.ModalClient/TunnelStop"
	ModalClient_VolumeCommit_FullMethodName                     = "/modal.client.ModalClient/VolumeCommit"
	ModalClient_VolumeCopyFiles_FullMethodName                  = "/modal.client.ModalClient/VolumeCopyFiles"
	ModalClient_VolumeDelete_FullMethodName                     = "/modal.client.ModalClient/VolumeDelete"
	ModalClient_VolumeGetFile_FullMethodName                    = "/modal.client.ModalClient/VolumeGetFile"
	ModalClient_VolumeGetOrCreate_FullMethodName                = "/modal.client.ModalClient/VolumeGetOrCreate"
	ModalClient_VolumeHeartbeat_FullMethodName                  = "/modal.client.ModalClient/VolumeHeartbeat"
	ModalClient_VolumeList_FullMethodName                       = "/modal.client.ModalClient/VolumeList"
	ModalClient_VolumeListFiles_FullMethodName                  = "/modal.client.ModalClient/VolumeListFiles"
	ModalClient_VolumePutFiles_FullMethodName                   = "/modal.client.ModalClient/VolumePutFiles"
	ModalClient_VolumePutFiles2_FullMethodName                  = "/modal.client.ModalClient/VolumePutFiles2"
	ModalClient_VolumeReload_FullMethodName                     = "/modal.client.ModalClient/VolumeReload"
	ModalClient_VolumeRemoveFile_FullMethodName                 = "/modal.client.ModalClient/VolumeRemoveFile"
	ModalClient_VolumeRename_FullMethodName                     = "/modal.client.ModalClient/VolumeRename"
	ModalClient_WorkspaceNameLookup_FullMethodName              = "/modal.client.ModalClient/WorkspaceNameLookup"
)

// ModalClientClient is the client API for ModalClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModalClientClient interface {
	// Apps
	AppClientDisconnect(ctx context.Context, in *AppClientDisconnectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AppCreate(ctx context.Context, in *AppCreateRequest, opts ...grpc.CallOption) (*AppCreateResponse, error)
	AppDeploy(ctx context.Context, in *AppDeployRequest, opts ...grpc.CallOption) (*AppDeployResponse, error)
	AppDeploymentHistory(ctx context.Context, in *AppDeploymentHistoryRequest, opts ...grpc.CallOption) (*AppDeploymentHistoryResponse, error)
	AppGetByDeploymentName(ctx context.Context, in *AppGetByDeploymentNameRequest, opts ...grpc.CallOption) (*AppGetByDeploymentNameResponse, error)
	AppGetLayout(ctx context.Context, in *AppGetLayoutRequest, opts ...grpc.CallOption) (*AppGetLayoutResponse, error)
	AppGetLogs(ctx context.Context, in *AppGetLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskLogsBatch], error)
	AppGetObjects(ctx context.Context, in *AppGetObjectsRequest, opts ...grpc.CallOption) (*AppGetObjectsResponse, error)
	AppGetOrCreate(ctx context.Context, in *AppGetOrCreateRequest, opts ...grpc.CallOption) (*AppGetOrCreateResponse, error)
	AppHeartbeat(ctx context.Context, in *AppHeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AppList(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppListResponse, error)
	AppLookup(ctx context.Context, in *AppLookupRequest, opts ...grpc.CallOption) (*AppLookupResponse, error)
	AppPublish(ctx context.Context, in *AppPublishRequest, opts ...grpc.CallOption) (*AppPublishResponse, error)
	AppRollback(ctx context.Context, in *AppRollbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AppSetObjects(ctx context.Context, in *AppSetObjectsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AppStop(ctx context.Context, in *AppStopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Input Plane
	// These RPCs are experimental, not deployed to production, and can be changed / removed
	// without needing to worry about backwards compatibility.
	AttemptAwait(ctx context.Context, in *AttemptAwaitRequest, opts ...grpc.CallOption) (*AttemptAwaitResponse, error)
	AttemptStart(ctx context.Context, in *AttemptStartRequest, opts ...grpc.CallOption) (*AttemptStartResponse, error)
	// Blobs
	BlobCreate(ctx context.Context, in *BlobCreateRequest, opts ...grpc.CallOption) (*BlobCreateResponse, error)
	BlobGet(ctx context.Context, in *BlobGetRequest, opts ...grpc.CallOption) (*BlobGetResponse, error)
	// Classes
	ClassCreate(ctx context.Context, in *ClassCreateRequest, opts ...grpc.CallOption) (*ClassCreateResponse, error)
	ClassGet(ctx context.Context, in *ClassGetRequest, opts ...grpc.CallOption) (*ClassGetResponse, error)
	// Clients
	ClientHello(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClientHelloResponse, error)
	// Clusters
	ClusterGet(ctx context.Context, in *ClusterGetRequest, opts ...grpc.CallOption) (*ClusterGetResponse, error)
	ClusterList(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error)
	// Container
	ContainerCheckpoint(ctx context.Context, in *ContainerCheckpointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ContainerExec(ctx context.Context, in *ContainerExecRequest, opts ...grpc.CallOption) (*ContainerExecResponse, error)
	ContainerExecGetOutput(ctx context.Context, in *ContainerExecGetOutputRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RuntimeOutputBatch], error)
	ContainerExecPutInput(ctx context.Context, in *ContainerExecPutInputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ContainerExecWait(ctx context.Context, in *ContainerExecWaitRequest, opts ...grpc.CallOption) (*ContainerExecWaitResponse, error)
	ContainerFilesystemExec(ctx context.Context, in *ContainerFilesystemExecRequest, opts ...grpc.CallOption) (*ContainerFilesystemExecResponse, error)
	ContainerFilesystemExecGetOutput(ctx context.Context, in *ContainerFilesystemExecGetOutputRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FilesystemRuntimeOutputBatch], error)
	ContainerHeartbeat(ctx context.Context, in *ContainerHeartbeatRequest, opts ...grpc.CallOption) (*ContainerHeartbeatResponse, error)
	ContainerHello(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ContainerLog(ctx context.Context, in *ContainerLogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ContainerStop(ctx context.Context, in *ContainerStopRequest, opts ...grpc.CallOption) (*ContainerStopResponse, error)
	// Dicts
	DictClear(ctx context.Context, in *DictClearRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DictContains(ctx context.Context, in *DictContainsRequest, opts ...grpc.CallOption) (*DictContainsResponse, error)
	DictContents(ctx context.Context, in *DictContentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DictEntry], error)
	DictDelete(ctx context.Context, in *DictDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DictGet(ctx context.Context, in *DictGetRequest, opts ...grpc.CallOption) (*DictGetResponse, error)
	DictGetOrCreate(ctx context.Context, in *DictGetOrCreateRequest, opts ...grpc.CallOption) (*DictGetOrCreateResponse, error)
	DictHeartbeat(ctx context.Context, in *DictHeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DictLen(ctx context.Context, in *DictLenRequest, opts ...grpc.CallOption) (*DictLenResponse, error)
	DictList(ctx context.Context, in *DictListRequest, opts ...grpc.CallOption) (*DictListResponse, error)
	DictPop(ctx context.Context, in *DictPopRequest, opts ...grpc.CallOption) (*DictPopResponse, error)
	DictUpdate(ctx context.Context, in *DictUpdateRequest, opts ...grpc.CallOption) (*DictUpdateResponse, error)
	// Domains
	DomainCertificateVerify(ctx context.Context, in *DomainCertificateVerifyRequest, opts ...grpc.CallOption) (*DomainCertificateVerifyResponse, error)
	DomainCreate(ctx context.Context, in *DomainCreateRequest, opts ...grpc.CallOption) (*DomainCreateResponse, error)
	DomainList(ctx context.Context, in *DomainListRequest, opts ...grpc.CallOption) (*DomainListResponse, error)
	// Environments
	EnvironmentCreate(ctx context.Context, in *EnvironmentCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EnvironmentDelete(ctx context.Context, in *EnvironmentDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EnvironmentGetOrCreate(ctx context.Context, in *EnvironmentGetOrCreateRequest, opts ...grpc.CallOption) (*EnvironmentGetOrCreateResponse, error)
	EnvironmentList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EnvironmentListResponse, error)
	EnvironmentUpdate(ctx context.Context, in *EnvironmentUpdateRequest, opts ...grpc.CallOption) (*EnvironmentListItem, error)
	// Functions
	FunctionAsyncInvoke(ctx context.Context, in *FunctionAsyncInvokeRequest, opts ...grpc.CallOption) (*FunctionAsyncInvokeResponse, error)
	FunctionBindParams(ctx context.Context, in *FunctionBindParamsRequest, opts ...grpc.CallOption) (*FunctionBindParamsResponse, error)
	FunctionCallCancel(ctx context.Context, in *FunctionCallCancelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FunctionCallGetDataIn(ctx context.Context, in *FunctionCallGetDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataChunk], error)
	FunctionCallGetDataOut(ctx context.Context, in *FunctionCallGetDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataChunk], error)
	FunctionCallList(ctx context.Context, in *FunctionCallListRequest, opts ...grpc.CallOption) (*FunctionCallListResponse, error)
	FunctionCallPutDataOut(ctx context.Context, in *FunctionCallPutDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FunctionCreate(ctx context.Context, in *FunctionCreateRequest, opts ...grpc.CallOption) (*FunctionCreateResponse, error)
	FunctionGet(ctx context.Context, in *FunctionGetRequest, opts ...grpc.CallOption) (*FunctionGetResponse, error)
	FunctionGetCallGraph(ctx context.Context, in *FunctionGetCallGraphRequest, opts ...grpc.CallOption) (*FunctionGetCallGraphResponse, error)
	FunctionGetCurrentStats(ctx context.Context, in *FunctionGetCurrentStatsRequest, opts ...grpc.CallOption) (*FunctionStats, error)
	FunctionGetDynamicConcurrency(ctx context.Context, in *FunctionGetDynamicConcurrencyRequest, opts ...grpc.CallOption) (*FunctionGetDynamicConcurrencyResponse, error)
	FunctionGetInputs(ctx context.Context, in *FunctionGetInputsRequest, opts ...grpc.CallOption) (*FunctionGetInputsResponse, error)
	FunctionGetOutputs(ctx context.Context, in *FunctionGetOutputsRequest, opts ...grpc.CallOption) (*FunctionGetOutputsResponse, error)
	FunctionGetSerialized(ctx context.Context, in *FunctionGetSerializedRequest, opts ...grpc.CallOption) (*FunctionGetSerializedResponse, error)
	FunctionMap(ctx context.Context, in *FunctionMapRequest, opts ...grpc.CallOption) (*FunctionMapResponse, error)
	FunctionPrecreate(ctx context.Context, in *FunctionPrecreateRequest, opts ...grpc.CallOption) (*FunctionPrecreateResponse, error)
	FunctionPutInputs(ctx context.Context, in *FunctionPutInputsRequest, opts ...grpc.CallOption) (*FunctionPutInputsResponse, error)
	FunctionPutOutputs(ctx context.Context, in *FunctionPutOutputsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FunctionRetryInputs(ctx context.Context, in *FunctionRetryInputsRequest, opts ...grpc.CallOption) (*FunctionRetryInputsResponse, error)
	FunctionStartPtyShell(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FunctionUpdateSchedulingParams(ctx context.Context, in *FunctionUpdateSchedulingParamsRequest, opts ...grpc.CallOption) (*FunctionUpdateSchedulingParamsResponse, error)
	// Images
	ImageFromId(ctx context.Context, in *ImageFromIdRequest, opts ...grpc.CallOption) (*ImageFromIdResponse, error)
	ImageGetOrCreate(ctx context.Context, in *ImageGetOrCreateRequest, opts ...grpc.CallOption) (*ImageGetOrCreateResponse, error)
	ImageJoinStreaming(ctx context.Context, in *ImageJoinStreamingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageJoinStreamingResponse], error)
	// Mounts
	MountGetOrCreate(ctx context.Context, in *MountGetOrCreateRequest, opts ...grpc.CallOption) (*MountGetOrCreateResponse, error)
	MountPutFile(ctx context.Context, in *MountPutFileRequest, opts ...grpc.CallOption) (*MountPutFileResponse, error)
	// Notebooks
	NotebookKernelPublishResults(ctx context.Context, in *NotebookKernelPublishResultsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Proxies
	ProxyAddIp(ctx context.Context, in *ProxyAddIpRequest, opts ...grpc.CallOption) (*ProxyAddIpResponse, error)
	ProxyCreate(ctx context.Context, in *ProxyCreateRequest, opts ...grpc.CallOption) (*ProxyCreateResponse, error)
	ProxyDelete(ctx context.Context, in *ProxyDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProxyGet(ctx context.Context, in *ProxyGetRequest, opts ...grpc.CallOption) (*ProxyGetResponse, error)
	ProxyGetOrCreate(ctx context.Context, in *ProxyGetOrCreateRequest, opts ...grpc.CallOption) (*ProxyGetOrCreateResponse, error)
	ProxyList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProxyListResponse, error)
	ProxyRemoveIp(ctx context.Context, in *ProxyRemoveIpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Queues
	QueueClear(ctx context.Context, in *QueueClearRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QueueDelete(ctx context.Context, in *QueueDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QueueGet(ctx context.Context, in *QueueGetRequest, opts ...grpc.CallOption) (*QueueGetResponse, error)
	QueueGetOrCreate(ctx context.Context, in *QueueGetOrCreateRequest, opts ...grpc.CallOption) (*QueueGetOrCreateResponse, error)
	QueueHeartbeat(ctx context.Context, in *QueueHeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QueueLen(ctx context.Context, in *QueueLenRequest, opts ...grpc.CallOption) (*QueueLenResponse, error)
	QueueList(ctx context.Context, in *QueueListRequest, opts ...grpc.CallOption) (*QueueListResponse, error)
	QueueNextItems(ctx context.Context, in *QueueNextItemsRequest, opts ...grpc.CallOption) (*QueueNextItemsResponse, error)
	QueuePut(ctx context.Context, in *QueuePutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Sandboxes
	SandboxCreate(ctx context.Context, in *SandboxCreateRequest, opts ...grpc.CallOption) (*SandboxCreateResponse, error)
	SandboxGetLogs(ctx context.Context, in *SandboxGetLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskLogsBatch], error)
	SandboxGetResourceUsage(ctx context.Context, in *SandboxGetResourceUsageRequest, opts ...grpc.CallOption) (*SandboxGetResourceUsageResponse, error)
	SandboxGetTaskId(ctx context.Context, in *SandboxGetTaskIdRequest, opts ...grpc.CallOption) (*SandboxGetTaskIdResponse, error)
	SandboxGetTunnels(ctx context.Context, in *SandboxGetTunnelsRequest, opts ...grpc.CallOption) (*SandboxGetTunnelsResponse, error)
	SandboxList(ctx context.Context, in *SandboxListRequest, opts ...grpc.CallOption) (*SandboxListResponse, error)
	SandboxRestore(ctx context.Context, in *SandboxRestoreRequest, opts ...grpc.CallOption) (*SandboxRestoreResponse, error)
	SandboxSnapshot(ctx context.Context, in *SandboxSnapshotRequest, opts ...grpc.CallOption) (*SandboxSnapshotResponse, error)
	SandboxSnapshotFs(ctx context.Context, in *SandboxSnapshotFsRequest, opts ...grpc.CallOption) (*SandboxSnapshotFsResponse, error)
	SandboxSnapshotGet(ctx context.Context, in *SandboxSnapshotGetRequest, opts ...grpc.CallOption) (*SandboxSnapshotGetResponse, error)
	SandboxSnapshotWait(ctx context.Context, in *SandboxSnapshotWaitRequest, opts ...grpc.CallOption) (*SandboxSnapshotWaitResponse, error)
	SandboxStdinWrite(ctx context.Context, in *SandboxStdinWriteRequest, opts ...grpc.CallOption) (*SandboxStdinWriteResponse, error)
	SandboxTagsSet(ctx context.Context, in *SandboxTagsSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SandboxTerminate(ctx context.Context, in *SandboxTerminateRequest, opts ...grpc.CallOption) (*SandboxTerminateResponse, error)
	SandboxWait(ctx context.Context, in *SandboxWaitRequest, opts ...grpc.CallOption) (*SandboxWaitResponse, error)
	// Secrets
	SecretDelete(ctx context.Context, in *SecretDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SecretGetOrCreate(ctx context.Context, in *SecretGetOrCreateRequest, opts ...grpc.CallOption) (*SecretGetOrCreateResponse, error)
	SecretList(ctx context.Context, in *SecretListRequest, opts ...grpc.CallOption) (*SecretListResponse, error)
	// SharedVolumes
	SharedVolumeDelete(ctx context.Context, in *SharedVolumeDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SharedVolumeGetFile(ctx context.Context, in *SharedVolumeGetFileRequest, opts ...grpc.CallOption) (*SharedVolumeGetFileResponse, error)
	SharedVolumeGetOrCreate(ctx context.Context, in *SharedVolumeGetOrCreateRequest, opts ...grpc.CallOption) (*SharedVolumeGetOrCreateResponse, error)
	SharedVolumeHeartbeat(ctx context.Context, in *SharedVolumeHeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SharedVolumeList(ctx context.Context, in *SharedVolumeListRequest, opts ...grpc.CallOption) (*SharedVolumeListResponse, error)
	SharedVolumeListFiles(ctx context.Context, in *SharedVolumeListFilesRequest, opts ...grpc.CallOption) (*SharedVolumeListFilesResponse, error)
	SharedVolumeListFilesStream(ctx context.Context, in *SharedVolumeListFilesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SharedVolumeListFilesResponse], error)
	SharedVolumePutFile(ctx context.Context, in *SharedVolumePutFileRequest, opts ...grpc.CallOption) (*SharedVolumePutFileResponse, error)
	SharedVolumeRemoveFile(ctx context.Context, in *SharedVolumeRemoveFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Tasks
	TaskClusterHello(ctx context.Context, in *TaskClusterHelloRequest, opts ...grpc.CallOption) (*TaskClusterHelloResponse, error)
	TaskCurrentInputs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TaskCurrentInputsResponse, error)
	TaskList(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListResponse, error)
	TaskResult(ctx context.Context, in *TaskResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Tokens (web auth flow)
	TokenFlowCreate(ctx context.Context, in *TokenFlowCreateRequest, opts ...grpc.CallOption) (*TokenFlowCreateResponse, error)
	TokenFlowWait(ctx context.Context, in *TokenFlowWaitRequest, opts ...grpc.CallOption) (*TokenFlowWaitResponse, error)
	// Tunnels
	TunnelStart(ctx context.Context, in *TunnelStartRequest, opts ...grpc.CallOption) (*TunnelStartResponse, error)
	TunnelStop(ctx context.Context, in *TunnelStopRequest, opts ...grpc.CallOption) (*TunnelStopResponse, error)
	// Volumes
	VolumeCommit(ctx context.Context, in *VolumeCommitRequest, opts ...grpc.CallOption) (*VolumeCommitResponse, error)
	VolumeCopyFiles(ctx context.Context, in *VolumeCopyFilesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VolumeDelete(ctx context.Context, in *VolumeDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VolumeGetFile(ctx context.Context, in *VolumeGetFileRequest, opts ...grpc.CallOption) (*VolumeGetFileResponse, error)
	VolumeGetOrCreate(ctx context.Context, in *VolumeGetOrCreateRequest, opts ...grpc.CallOption) (*VolumeGetOrCreateResponse, error)
	VolumeHeartbeat(ctx context.Context, in *VolumeHeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VolumeList(ctx context.Context, in *VolumeListRequest, opts ...grpc.CallOption) (*VolumeListResponse, error)
	VolumeListFiles(ctx context.Context, in *VolumeListFilesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VolumeListFilesResponse], error)
	VolumePutFiles(ctx context.Context, in *VolumePutFilesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VolumePutFiles2(ctx context.Context, in *VolumePutFiles2Request, opts ...grpc.CallOption) (*VolumePutFiles2Response, error)
	VolumeReload(ctx context.Context, in *VolumeReloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VolumeRemoveFile(ctx context.Context, in *VolumeRemoveFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VolumeRename(ctx context.Context, in *VolumeRenameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Workspaces
	WorkspaceNameLookup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WorkspaceNameLookupResponse, error)
}

type modalClientClient struct {
	cc grpc.ClientConnInterface
}

func NewModalClientClient(cc grpc.ClientConnInterface) ModalClientClient {
	return &modalClientClient{cc}
}

func (c *modalClientClient) AppClientDisconnect(ctx context.Context, in *AppClientDisconnectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_AppClientDisconnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AppCreate(ctx context.Context, in *AppCreateRequest, opts ...grpc.CallOption) (*AppCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_AppCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AppDeploy(ctx context.Context, in *AppDeployRequest, opts ...grpc.CallOption) (*AppDeployResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppDeployResponse)
	err := c.cc.Invoke(ctx, ModalClient_AppDeploy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AppDeploymentHistory(ctx context.Context, in *AppDeploymentHistoryRequest, opts ...grpc.CallOption) (*AppDeploymentHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppDeploymentHistoryResponse)
	err := c.cc.Invoke(ctx, ModalClient_AppDeploymentHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AppGetByDeploymentName(ctx context.Context, in *AppGetByDeploymentNameRequest, opts ...grpc.CallOption) (*AppGetByDeploymentNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppGetByDeploymentNameResponse)
	err := c.cc.Invoke(ctx, ModalClient_AppGetByDeploymentName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AppGetLayout(ctx context.Context, in *AppGetLayoutRequest, opts ...grpc.CallOption) (*AppGetLayoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppGetLayoutResponse)
	err := c.cc.Invoke(ctx, ModalClient_AppGetLayout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AppGetLogs(ctx context.Context, in *AppGetLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskLogsBatch], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModalClient_ServiceDesc.Streams[0], ModalClient_AppGetLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AppGetLogsRequest, TaskLogsBatch]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_AppGetLogsClient = grpc.ServerStreamingClient[TaskLogsBatch]

func (c *modalClientClient) AppGetObjects(ctx context.Context, in *AppGetObjectsRequest, opts ...grpc.CallOption) (*AppGetObjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppGetObjectsResponse)
	err := c.cc.Invoke(ctx, ModalClient_AppGetObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AppGetOrCreate(ctx context.Context, in *AppGetOrCreateRequest, opts ...grpc.CallOption) (*AppGetOrCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppGetOrCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_AppGetOrCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AppHeartbeat(ctx context.Context, in *AppHeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_AppHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AppList(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppListResponse)
	err := c.cc.Invoke(ctx, ModalClient_AppList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AppLookup(ctx context.Context, in *AppLookupRequest, opts ...grpc.CallOption) (*AppLookupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppLookupResponse)
	err := c.cc.Invoke(ctx, ModalClient_AppLookup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AppPublish(ctx context.Context, in *AppPublishRequest, opts ...grpc.CallOption) (*AppPublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppPublishResponse)
	err := c.cc.Invoke(ctx, ModalClient_AppPublish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AppRollback(ctx context.Context, in *AppRollbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_AppRollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AppSetObjects(ctx context.Context, in *AppSetObjectsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_AppSetObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AppStop(ctx context.Context, in *AppStopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_AppStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AttemptAwait(ctx context.Context, in *AttemptAwaitRequest, opts ...grpc.CallOption) (*AttemptAwaitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttemptAwaitResponse)
	err := c.cc.Invoke(ctx, ModalClient_AttemptAwait_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) AttemptStart(ctx context.Context, in *AttemptStartRequest, opts ...grpc.CallOption) (*AttemptStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttemptStartResponse)
	err := c.cc.Invoke(ctx, ModalClient_AttemptStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) BlobCreate(ctx context.Context, in *BlobCreateRequest, opts ...grpc.CallOption) (*BlobCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlobCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_BlobCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) BlobGet(ctx context.Context, in *BlobGetRequest, opts ...grpc.CallOption) (*BlobGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlobGetResponse)
	err := c.cc.Invoke(ctx, ModalClient_BlobGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ClassCreate(ctx context.Context, in *ClassCreateRequest, opts ...grpc.CallOption) (*ClassCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClassCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_ClassCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ClassGet(ctx context.Context, in *ClassGetRequest, opts ...grpc.CallOption) (*ClassGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClassGetResponse)
	err := c.cc.Invoke(ctx, ModalClient_ClassGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ClientHello(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClientHelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientHelloResponse)
	err := c.cc.Invoke(ctx, ModalClient_ClientHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ClusterGet(ctx context.Context, in *ClusterGetRequest, opts ...grpc.CallOption) (*ClusterGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterGetResponse)
	err := c.cc.Invoke(ctx, ModalClient_ClusterGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ClusterList(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterListResponse)
	err := c.cc.Invoke(ctx, ModalClient_ClusterList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ContainerCheckpoint(ctx context.Context, in *ContainerCheckpointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_ContainerCheckpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ContainerExec(ctx context.Context, in *ContainerExecRequest, opts ...grpc.CallOption) (*ContainerExecResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContainerExecResponse)
	err := c.cc.Invoke(ctx, ModalClient_ContainerExec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ContainerExecGetOutput(ctx context.Context, in *ContainerExecGetOutputRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RuntimeOutputBatch], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModalClient_ServiceDesc.Streams[1], ModalClient_ContainerExecGetOutput_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ContainerExecGetOutputRequest, RuntimeOutputBatch]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_ContainerExecGetOutputClient = grpc.ServerStreamingClient[RuntimeOutputBatch]

func (c *modalClientClient) ContainerExecPutInput(ctx context.Context, in *ContainerExecPutInputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_ContainerExecPutInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ContainerExecWait(ctx context.Context, in *ContainerExecWaitRequest, opts ...grpc.CallOption) (*ContainerExecWaitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContainerExecWaitResponse)
	err := c.cc.Invoke(ctx, ModalClient_ContainerExecWait_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ContainerFilesystemExec(ctx context.Context, in *ContainerFilesystemExecRequest, opts ...grpc.CallOption) (*ContainerFilesystemExecResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContainerFilesystemExecResponse)
	err := c.cc.Invoke(ctx, ModalClient_ContainerFilesystemExec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ContainerFilesystemExecGetOutput(ctx context.Context, in *ContainerFilesystemExecGetOutputRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FilesystemRuntimeOutputBatch], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModalClient_ServiceDesc.Streams[2], ModalClient_ContainerFilesystemExecGetOutput_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ContainerFilesystemExecGetOutputRequest, FilesystemRuntimeOutputBatch]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_ContainerFilesystemExecGetOutputClient = grpc.ServerStreamingClient[FilesystemRuntimeOutputBatch]

func (c *modalClientClient) ContainerHeartbeat(ctx context.Context, in *ContainerHeartbeatRequest, opts ...grpc.CallOption) (*ContainerHeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContainerHeartbeatResponse)
	err := c.cc.Invoke(ctx, ModalClient_ContainerHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ContainerHello(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_ContainerHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ContainerLog(ctx context.Context, in *ContainerLogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_ContainerLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ContainerStop(ctx context.Context, in *ContainerStopRequest, opts ...grpc.CallOption) (*ContainerStopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContainerStopResponse)
	err := c.cc.Invoke(ctx, ModalClient_ContainerStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) DictClear(ctx context.Context, in *DictClearRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_DictClear_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) DictContains(ctx context.Context, in *DictContainsRequest, opts ...grpc.CallOption) (*DictContainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictContainsResponse)
	err := c.cc.Invoke(ctx, ModalClient_DictContains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) DictContents(ctx context.Context, in *DictContentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DictEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModalClient_ServiceDesc.Streams[3], ModalClient_DictContents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DictContentsRequest, DictEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_DictContentsClient = grpc.ServerStreamingClient[DictEntry]

func (c *modalClientClient) DictDelete(ctx context.Context, in *DictDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_DictDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) DictGet(ctx context.Context, in *DictGetRequest, opts ...grpc.CallOption) (*DictGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictGetResponse)
	err := c.cc.Invoke(ctx, ModalClient_DictGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) DictGetOrCreate(ctx context.Context, in *DictGetOrCreateRequest, opts ...grpc.CallOption) (*DictGetOrCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictGetOrCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_DictGetOrCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) DictHeartbeat(ctx context.Context, in *DictHeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_DictHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) DictLen(ctx context.Context, in *DictLenRequest, opts ...grpc.CallOption) (*DictLenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictLenResponse)
	err := c.cc.Invoke(ctx, ModalClient_DictLen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) DictList(ctx context.Context, in *DictListRequest, opts ...grpc.CallOption) (*DictListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictListResponse)
	err := c.cc.Invoke(ctx, ModalClient_DictList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) DictPop(ctx context.Context, in *DictPopRequest, opts ...grpc.CallOption) (*DictPopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictPopResponse)
	err := c.cc.Invoke(ctx, ModalClient_DictPop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) DictUpdate(ctx context.Context, in *DictUpdateRequest, opts ...grpc.CallOption) (*DictUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictUpdateResponse)
	err := c.cc.Invoke(ctx, ModalClient_DictUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) DomainCertificateVerify(ctx context.Context, in *DomainCertificateVerifyRequest, opts ...grpc.CallOption) (*DomainCertificateVerifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DomainCertificateVerifyResponse)
	err := c.cc.Invoke(ctx, ModalClient_DomainCertificateVerify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) DomainCreate(ctx context.Context, in *DomainCreateRequest, opts ...grpc.CallOption) (*DomainCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DomainCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_DomainCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) DomainList(ctx context.Context, in *DomainListRequest, opts ...grpc.CallOption) (*DomainListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DomainListResponse)
	err := c.cc.Invoke(ctx, ModalClient_DomainList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) EnvironmentCreate(ctx context.Context, in *EnvironmentCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_EnvironmentCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) EnvironmentDelete(ctx context.Context, in *EnvironmentDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_EnvironmentDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) EnvironmentGetOrCreate(ctx context.Context, in *EnvironmentGetOrCreateRequest, opts ...grpc.CallOption) (*EnvironmentGetOrCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnvironmentGetOrCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_EnvironmentGetOrCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) EnvironmentList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EnvironmentListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnvironmentListResponse)
	err := c.cc.Invoke(ctx, ModalClient_EnvironmentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) EnvironmentUpdate(ctx context.Context, in *EnvironmentUpdateRequest, opts ...grpc.CallOption) (*EnvironmentListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnvironmentListItem)
	err := c.cc.Invoke(ctx, ModalClient_EnvironmentUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionAsyncInvoke(ctx context.Context, in *FunctionAsyncInvokeRequest, opts ...grpc.CallOption) (*FunctionAsyncInvokeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionAsyncInvokeResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionAsyncInvoke_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionBindParams(ctx context.Context, in *FunctionBindParamsRequest, opts ...grpc.CallOption) (*FunctionBindParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionBindParamsResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionBindParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionCallCancel(ctx context.Context, in *FunctionCallCancelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_FunctionCallCancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionCallGetDataIn(ctx context.Context, in *FunctionCallGetDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModalClient_ServiceDesc.Streams[4], ModalClient_FunctionCallGetDataIn_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FunctionCallGetDataRequest, DataChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_FunctionCallGetDataInClient = grpc.ServerStreamingClient[DataChunk]

func (c *modalClientClient) FunctionCallGetDataOut(ctx context.Context, in *FunctionCallGetDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModalClient_ServiceDesc.Streams[5], ModalClient_FunctionCallGetDataOut_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FunctionCallGetDataRequest, DataChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_FunctionCallGetDataOutClient = grpc.ServerStreamingClient[DataChunk]

func (c *modalClientClient) FunctionCallList(ctx context.Context, in *FunctionCallListRequest, opts ...grpc.CallOption) (*FunctionCallListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionCallListResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionCallList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionCallPutDataOut(ctx context.Context, in *FunctionCallPutDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_FunctionCallPutDataOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionCreate(ctx context.Context, in *FunctionCreateRequest, opts ...grpc.CallOption) (*FunctionCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionGet(ctx context.Context, in *FunctionGetRequest, opts ...grpc.CallOption) (*FunctionGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionGetResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionGetCallGraph(ctx context.Context, in *FunctionGetCallGraphRequest, opts ...grpc.CallOption) (*FunctionGetCallGraphResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionGetCallGraphResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionGetCallGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionGetCurrentStats(ctx context.Context, in *FunctionGetCurrentStatsRequest, opts ...grpc.CallOption) (*FunctionStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionStats)
	err := c.cc.Invoke(ctx, ModalClient_FunctionGetCurrentStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionGetDynamicConcurrency(ctx context.Context, in *FunctionGetDynamicConcurrencyRequest, opts ...grpc.CallOption) (*FunctionGetDynamicConcurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionGetDynamicConcurrencyResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionGetDynamicConcurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionGetInputs(ctx context.Context, in *FunctionGetInputsRequest, opts ...grpc.CallOption) (*FunctionGetInputsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionGetInputsResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionGetInputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionGetOutputs(ctx context.Context, in *FunctionGetOutputsRequest, opts ...grpc.CallOption) (*FunctionGetOutputsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionGetOutputsResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionGetOutputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionGetSerialized(ctx context.Context, in *FunctionGetSerializedRequest, opts ...grpc.CallOption) (*FunctionGetSerializedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionGetSerializedResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionGetSerialized_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionMap(ctx context.Context, in *FunctionMapRequest, opts ...grpc.CallOption) (*FunctionMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionMapResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionPrecreate(ctx context.Context, in *FunctionPrecreateRequest, opts ...grpc.CallOption) (*FunctionPrecreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionPrecreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionPrecreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionPutInputs(ctx context.Context, in *FunctionPutInputsRequest, opts ...grpc.CallOption) (*FunctionPutInputsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionPutInputsResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionPutInputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionPutOutputs(ctx context.Context, in *FunctionPutOutputsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_FunctionPutOutputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionRetryInputs(ctx context.Context, in *FunctionRetryInputsRequest, opts ...grpc.CallOption) (*FunctionRetryInputsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionRetryInputsResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionRetryInputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionStartPtyShell(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_FunctionStartPtyShell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) FunctionUpdateSchedulingParams(ctx context.Context, in *FunctionUpdateSchedulingParamsRequest, opts ...grpc.CallOption) (*FunctionUpdateSchedulingParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionUpdateSchedulingParamsResponse)
	err := c.cc.Invoke(ctx, ModalClient_FunctionUpdateSchedulingParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ImageFromId(ctx context.Context, in *ImageFromIdRequest, opts ...grpc.CallOption) (*ImageFromIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageFromIdResponse)
	err := c.cc.Invoke(ctx, ModalClient_ImageFromId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ImageGetOrCreate(ctx context.Context, in *ImageGetOrCreateRequest, opts ...grpc.CallOption) (*ImageGetOrCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageGetOrCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_ImageGetOrCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ImageJoinStreaming(ctx context.Context, in *ImageJoinStreamingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageJoinStreamingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModalClient_ServiceDesc.Streams[6], ModalClient_ImageJoinStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ImageJoinStreamingRequest, ImageJoinStreamingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_ImageJoinStreamingClient = grpc.ServerStreamingClient[ImageJoinStreamingResponse]

func (c *modalClientClient) MountGetOrCreate(ctx context.Context, in *MountGetOrCreateRequest, opts ...grpc.CallOption) (*MountGetOrCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountGetOrCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_MountGetOrCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) MountPutFile(ctx context.Context, in *MountPutFileRequest, opts ...grpc.CallOption) (*MountPutFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountPutFileResponse)
	err := c.cc.Invoke(ctx, ModalClient_MountPutFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) NotebookKernelPublishResults(ctx context.Context, in *NotebookKernelPublishResultsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_NotebookKernelPublishResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ProxyAddIp(ctx context.Context, in *ProxyAddIpRequest, opts ...grpc.CallOption) (*ProxyAddIpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyAddIpResponse)
	err := c.cc.Invoke(ctx, ModalClient_ProxyAddIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ProxyCreate(ctx context.Context, in *ProxyCreateRequest, opts ...grpc.CallOption) (*ProxyCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_ProxyCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ProxyDelete(ctx context.Context, in *ProxyDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_ProxyDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ProxyGet(ctx context.Context, in *ProxyGetRequest, opts ...grpc.CallOption) (*ProxyGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyGetResponse)
	err := c.cc.Invoke(ctx, ModalClient_ProxyGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ProxyGetOrCreate(ctx context.Context, in *ProxyGetOrCreateRequest, opts ...grpc.CallOption) (*ProxyGetOrCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyGetOrCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_ProxyGetOrCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ProxyList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProxyListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyListResponse)
	err := c.cc.Invoke(ctx, ModalClient_ProxyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) ProxyRemoveIp(ctx context.Context, in *ProxyRemoveIpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_ProxyRemoveIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) QueueClear(ctx context.Context, in *QueueClearRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_QueueClear_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) QueueDelete(ctx context.Context, in *QueueDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_QueueDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) QueueGet(ctx context.Context, in *QueueGetRequest, opts ...grpc.CallOption) (*QueueGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueGetResponse)
	err := c.cc.Invoke(ctx, ModalClient_QueueGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) QueueGetOrCreate(ctx context.Context, in *QueueGetOrCreateRequest, opts ...grpc.CallOption) (*QueueGetOrCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueGetOrCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_QueueGetOrCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) QueueHeartbeat(ctx context.Context, in *QueueHeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_QueueHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) QueueLen(ctx context.Context, in *QueueLenRequest, opts ...grpc.CallOption) (*QueueLenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueLenResponse)
	err := c.cc.Invoke(ctx, ModalClient_QueueLen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) QueueList(ctx context.Context, in *QueueListRequest, opts ...grpc.CallOption) (*QueueListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueListResponse)
	err := c.cc.Invoke(ctx, ModalClient_QueueList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) QueueNextItems(ctx context.Context, in *QueueNextItemsRequest, opts ...grpc.CallOption) (*QueueNextItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueNextItemsResponse)
	err := c.cc.Invoke(ctx, ModalClient_QueueNextItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) QueuePut(ctx context.Context, in *QueuePutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_QueuePut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SandboxCreate(ctx context.Context, in *SandboxCreateRequest, opts ...grpc.CallOption) (*SandboxCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_SandboxCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SandboxGetLogs(ctx context.Context, in *SandboxGetLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskLogsBatch], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModalClient_ServiceDesc.Streams[7], ModalClient_SandboxGetLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SandboxGetLogsRequest, TaskLogsBatch]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_SandboxGetLogsClient = grpc.ServerStreamingClient[TaskLogsBatch]

func (c *modalClientClient) SandboxGetResourceUsage(ctx context.Context, in *SandboxGetResourceUsageRequest, opts ...grpc.CallOption) (*SandboxGetResourceUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxGetResourceUsageResponse)
	err := c.cc.Invoke(ctx, ModalClient_SandboxGetResourceUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SandboxGetTaskId(ctx context.Context, in *SandboxGetTaskIdRequest, opts ...grpc.CallOption) (*SandboxGetTaskIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxGetTaskIdResponse)
	err := c.cc.Invoke(ctx, ModalClient_SandboxGetTaskId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SandboxGetTunnels(ctx context.Context, in *SandboxGetTunnelsRequest, opts ...grpc.CallOption) (*SandboxGetTunnelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxGetTunnelsResponse)
	err := c.cc.Invoke(ctx, ModalClient_SandboxGetTunnels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SandboxList(ctx context.Context, in *SandboxListRequest, opts ...grpc.CallOption) (*SandboxListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxListResponse)
	err := c.cc.Invoke(ctx, ModalClient_SandboxList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SandboxRestore(ctx context.Context, in *SandboxRestoreRequest, opts ...grpc.CallOption) (*SandboxRestoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxRestoreResponse)
	err := c.cc.Invoke(ctx, ModalClient_SandboxRestore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SandboxSnapshot(ctx context.Context, in *SandboxSnapshotRequest, opts ...grpc.CallOption) (*SandboxSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxSnapshotResponse)
	err := c.cc.Invoke(ctx, ModalClient_SandboxSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SandboxSnapshotFs(ctx context.Context, in *SandboxSnapshotFsRequest, opts ...grpc.CallOption) (*SandboxSnapshotFsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxSnapshotFsResponse)
	err := c.cc.Invoke(ctx, ModalClient_SandboxSnapshotFs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SandboxSnapshotGet(ctx context.Context, in *SandboxSnapshotGetRequest, opts ...grpc.CallOption) (*SandboxSnapshotGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxSnapshotGetResponse)
	err := c.cc.Invoke(ctx, ModalClient_SandboxSnapshotGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SandboxSnapshotWait(ctx context.Context, in *SandboxSnapshotWaitRequest, opts ...grpc.CallOption) (*SandboxSnapshotWaitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxSnapshotWaitResponse)
	err := c.cc.Invoke(ctx, ModalClient_SandboxSnapshotWait_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SandboxStdinWrite(ctx context.Context, in *SandboxStdinWriteRequest, opts ...grpc.CallOption) (*SandboxStdinWriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxStdinWriteResponse)
	err := c.cc.Invoke(ctx, ModalClient_SandboxStdinWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SandboxTagsSet(ctx context.Context, in *SandboxTagsSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_SandboxTagsSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SandboxTerminate(ctx context.Context, in *SandboxTerminateRequest, opts ...grpc.CallOption) (*SandboxTerminateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxTerminateResponse)
	err := c.cc.Invoke(ctx, ModalClient_SandboxTerminate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SandboxWait(ctx context.Context, in *SandboxWaitRequest, opts ...grpc.CallOption) (*SandboxWaitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxWaitResponse)
	err := c.cc.Invoke(ctx, ModalClient_SandboxWait_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SecretDelete(ctx context.Context, in *SecretDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_SecretDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SecretGetOrCreate(ctx context.Context, in *SecretGetOrCreateRequest, opts ...grpc.CallOption) (*SecretGetOrCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretGetOrCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_SecretGetOrCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SecretList(ctx context.Context, in *SecretListRequest, opts ...grpc.CallOption) (*SecretListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretListResponse)
	err := c.cc.Invoke(ctx, ModalClient_SecretList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SharedVolumeDelete(ctx context.Context, in *SharedVolumeDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_SharedVolumeDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SharedVolumeGetFile(ctx context.Context, in *SharedVolumeGetFileRequest, opts ...grpc.CallOption) (*SharedVolumeGetFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SharedVolumeGetFileResponse)
	err := c.cc.Invoke(ctx, ModalClient_SharedVolumeGetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SharedVolumeGetOrCreate(ctx context.Context, in *SharedVolumeGetOrCreateRequest, opts ...grpc.CallOption) (*SharedVolumeGetOrCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SharedVolumeGetOrCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_SharedVolumeGetOrCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SharedVolumeHeartbeat(ctx context.Context, in *SharedVolumeHeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_SharedVolumeHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SharedVolumeList(ctx context.Context, in *SharedVolumeListRequest, opts ...grpc.CallOption) (*SharedVolumeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SharedVolumeListResponse)
	err := c.cc.Invoke(ctx, ModalClient_SharedVolumeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SharedVolumeListFiles(ctx context.Context, in *SharedVolumeListFilesRequest, opts ...grpc.CallOption) (*SharedVolumeListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SharedVolumeListFilesResponse)
	err := c.cc.Invoke(ctx, ModalClient_SharedVolumeListFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SharedVolumeListFilesStream(ctx context.Context, in *SharedVolumeListFilesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SharedVolumeListFilesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModalClient_ServiceDesc.Streams[8], ModalClient_SharedVolumeListFilesStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SharedVolumeListFilesRequest, SharedVolumeListFilesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_SharedVolumeListFilesStreamClient = grpc.ServerStreamingClient[SharedVolumeListFilesResponse]

func (c *modalClientClient) SharedVolumePutFile(ctx context.Context, in *SharedVolumePutFileRequest, opts ...grpc.CallOption) (*SharedVolumePutFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SharedVolumePutFileResponse)
	err := c.cc.Invoke(ctx, ModalClient_SharedVolumePutFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) SharedVolumeRemoveFile(ctx context.Context, in *SharedVolumeRemoveFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_SharedVolumeRemoveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) TaskClusterHello(ctx context.Context, in *TaskClusterHelloRequest, opts ...grpc.CallOption) (*TaskClusterHelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskClusterHelloResponse)
	err := c.cc.Invoke(ctx, ModalClient_TaskClusterHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) TaskCurrentInputs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TaskCurrentInputsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskCurrentInputsResponse)
	err := c.cc.Invoke(ctx, ModalClient_TaskCurrentInputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) TaskList(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskListResponse)
	err := c.cc.Invoke(ctx, ModalClient_TaskList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) TaskResult(ctx context.Context, in *TaskResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_TaskResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) TokenFlowCreate(ctx context.Context, in *TokenFlowCreateRequest, opts ...grpc.CallOption) (*TokenFlowCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenFlowCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_TokenFlowCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) TokenFlowWait(ctx context.Context, in *TokenFlowWaitRequest, opts ...grpc.CallOption) (*TokenFlowWaitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenFlowWaitResponse)
	err := c.cc.Invoke(ctx, ModalClient_TokenFlowWait_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) TunnelStart(ctx context.Context, in *TunnelStartRequest, opts ...grpc.CallOption) (*TunnelStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TunnelStartResponse)
	err := c.cc.Invoke(ctx, ModalClient_TunnelStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) TunnelStop(ctx context.Context, in *TunnelStopRequest, opts ...grpc.CallOption) (*TunnelStopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TunnelStopResponse)
	err := c.cc.Invoke(ctx, ModalClient_TunnelStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) VolumeCommit(ctx context.Context, in *VolumeCommitRequest, opts ...grpc.CallOption) (*VolumeCommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeCommitResponse)
	err := c.cc.Invoke(ctx, ModalClient_VolumeCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) VolumeCopyFiles(ctx context.Context, in *VolumeCopyFilesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_VolumeCopyFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) VolumeDelete(ctx context.Context, in *VolumeDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_VolumeDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) VolumeGetFile(ctx context.Context, in *VolumeGetFileRequest, opts ...grpc.CallOption) (*VolumeGetFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeGetFileResponse)
	err := c.cc.Invoke(ctx, ModalClient_VolumeGetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) VolumeGetOrCreate(ctx context.Context, in *VolumeGetOrCreateRequest, opts ...grpc.CallOption) (*VolumeGetOrCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeGetOrCreateResponse)
	err := c.cc.Invoke(ctx, ModalClient_VolumeGetOrCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) VolumeHeartbeat(ctx context.Context, in *VolumeHeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_VolumeHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) VolumeList(ctx context.Context, in *VolumeListRequest, opts ...grpc.CallOption) (*VolumeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeListResponse)
	err := c.cc.Invoke(ctx, ModalClient_VolumeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) VolumeListFiles(ctx context.Context, in *VolumeListFilesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VolumeListFilesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModalClient_ServiceDesc.Streams[9], ModalClient_VolumeListFiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VolumeListFilesRequest, VolumeListFilesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_VolumeListFilesClient = grpc.ServerStreamingClient[VolumeListFilesResponse]

func (c *modalClientClient) VolumePutFiles(ctx context.Context, in *VolumePutFilesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_VolumePutFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) VolumePutFiles2(ctx context.Context, in *VolumePutFiles2Request, opts ...grpc.CallOption) (*VolumePutFiles2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumePutFiles2Response)
	err := c.cc.Invoke(ctx, ModalClient_VolumePutFiles2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) VolumeReload(ctx context.Context, in *VolumeReloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_VolumeReload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) VolumeRemoveFile(ctx context.Context, in *VolumeRemoveFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_VolumeRemoveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) VolumeRename(ctx context.Context, in *VolumeRenameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModalClient_VolumeRename_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClientClient) WorkspaceNameLookup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WorkspaceNameLookupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceNameLookupResponse)
	err := c.cc.Invoke(ctx, ModalClient_WorkspaceNameLookup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModalClientServer is the server API for ModalClient service.
// All implementations must embed UnimplementedModalClientServer
// for forward compatibility.
type ModalClientServer interface {
	// Apps
	AppClientDisconnect(context.Context, *AppClientDisconnectRequest) (*emptypb.Empty, error)
	AppCreate(context.Context, *AppCreateRequest) (*AppCreateResponse, error)
	AppDeploy(context.Context, *AppDeployRequest) (*AppDeployResponse, error)
	AppDeploymentHistory(context.Context, *AppDeploymentHistoryRequest) (*AppDeploymentHistoryResponse, error)
	AppGetByDeploymentName(context.Context, *AppGetByDeploymentNameRequest) (*AppGetByDeploymentNameResponse, error)
	AppGetLayout(context.Context, *AppGetLayoutRequest) (*AppGetLayoutResponse, error)
	AppGetLogs(*AppGetLogsRequest, grpc.ServerStreamingServer[TaskLogsBatch]) error
	AppGetObjects(context.Context, *AppGetObjectsRequest) (*AppGetObjectsResponse, error)
	AppGetOrCreate(context.Context, *AppGetOrCreateRequest) (*AppGetOrCreateResponse, error)
	AppHeartbeat(context.Context, *AppHeartbeatRequest) (*emptypb.Empty, error)
	AppList(context.Context, *AppListRequest) (*AppListResponse, error)
	AppLookup(context.Context, *AppLookupRequest) (*AppLookupResponse, error)
	AppPublish(context.Context, *AppPublishRequest) (*AppPublishResponse, error)
	AppRollback(context.Context, *AppRollbackRequest) (*emptypb.Empty, error)
	AppSetObjects(context.Context, *AppSetObjectsRequest) (*emptypb.Empty, error)
	AppStop(context.Context, *AppStopRequest) (*emptypb.Empty, error)
	// Input Plane
	// These RPCs are experimental, not deployed to production, and can be changed / removed
	// without needing to worry about backwards compatibility.
	AttemptAwait(context.Context, *AttemptAwaitRequest) (*AttemptAwaitResponse, error)
	AttemptStart(context.Context, *AttemptStartRequest) (*AttemptStartResponse, error)
	// Blobs
	BlobCreate(context.Context, *BlobCreateRequest) (*BlobCreateResponse, error)
	BlobGet(context.Context, *BlobGetRequest) (*BlobGetResponse, error)
	// Classes
	ClassCreate(context.Context, *ClassCreateRequest) (*ClassCreateResponse, error)
	ClassGet(context.Context, *ClassGetRequest) (*ClassGetResponse, error)
	// Clients
	ClientHello(context.Context, *emptypb.Empty) (*ClientHelloResponse, error)
	// Clusters
	ClusterGet(context.Context, *ClusterGetRequest) (*ClusterGetResponse, error)
	ClusterList(context.Context, *ClusterListRequest) (*ClusterListResponse, error)
	// Container
	ContainerCheckpoint(context.Context, *ContainerCheckpointRequest) (*emptypb.Empty, error)
	ContainerExec(context.Context, *ContainerExecRequest) (*ContainerExecResponse, error)
	ContainerExecGetOutput(*ContainerExecGetOutputRequest, grpc.ServerStreamingServer[RuntimeOutputBatch]) error
	ContainerExecPutInput(context.Context, *ContainerExecPutInputRequest) (*emptypb.Empty, error)
	ContainerExecWait(context.Context, *ContainerExecWaitRequest) (*ContainerExecWaitResponse, error)
	ContainerFilesystemExec(context.Context, *ContainerFilesystemExecRequest) (*ContainerFilesystemExecResponse, error)
	ContainerFilesystemExecGetOutput(*ContainerFilesystemExecGetOutputRequest, grpc.ServerStreamingServer[FilesystemRuntimeOutputBatch]) error
	ContainerHeartbeat(context.Context, *ContainerHeartbeatRequest) (*ContainerHeartbeatResponse, error)
	ContainerHello(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ContainerLog(context.Context, *ContainerLogRequest) (*emptypb.Empty, error)
	ContainerStop(context.Context, *ContainerStopRequest) (*ContainerStopResponse, error)
	// Dicts
	DictClear(context.Context, *DictClearRequest) (*emptypb.Empty, error)
	DictContains(context.Context, *DictContainsRequest) (*DictContainsResponse, error)
	DictContents(*DictContentsRequest, grpc.ServerStreamingServer[DictEntry]) error
	DictDelete(context.Context, *DictDeleteRequest) (*emptypb.Empty, error)
	DictGet(context.Context, *DictGetRequest) (*DictGetResponse, error)
	DictGetOrCreate(context.Context, *DictGetOrCreateRequest) (*DictGetOrCreateResponse, error)
	DictHeartbeat(context.Context, *DictHeartbeatRequest) (*emptypb.Empty, error)
	DictLen(context.Context, *DictLenRequest) (*DictLenResponse, error)
	DictList(context.Context, *DictListRequest) (*DictListResponse, error)
	DictPop(context.Context, *DictPopRequest) (*DictPopResponse, error)
	DictUpdate(context.Context, *DictUpdateRequest) (*DictUpdateResponse, error)
	// Domains
	DomainCertificateVerify(context.Context, *DomainCertificateVerifyRequest) (*DomainCertificateVerifyResponse, error)
	DomainCreate(context.Context, *DomainCreateRequest) (*DomainCreateResponse, error)
	DomainList(context.Context, *DomainListRequest) (*DomainListResponse, error)
	// Environments
	EnvironmentCreate(context.Context, *EnvironmentCreateRequest) (*emptypb.Empty, error)
	EnvironmentDelete(context.Context, *EnvironmentDeleteRequest) (*emptypb.Empty, error)
	EnvironmentGetOrCreate(context.Context, *EnvironmentGetOrCreateRequest) (*EnvironmentGetOrCreateResponse, error)
	EnvironmentList(context.Context, *emptypb.Empty) (*EnvironmentListResponse, error)
	EnvironmentUpdate(context.Context, *EnvironmentUpdateRequest) (*EnvironmentListItem, error)
	// Functions
	FunctionAsyncInvoke(context.Context, *FunctionAsyncInvokeRequest) (*FunctionAsyncInvokeResponse, error)
	FunctionBindParams(context.Context, *FunctionBindParamsRequest) (*FunctionBindParamsResponse, error)
	FunctionCallCancel(context.Context, *FunctionCallCancelRequest) (*emptypb.Empty, error)
	FunctionCallGetDataIn(*FunctionCallGetDataRequest, grpc.ServerStreamingServer[DataChunk]) error
	FunctionCallGetDataOut(*FunctionCallGetDataRequest, grpc.ServerStreamingServer[DataChunk]) error
	FunctionCallList(context.Context, *FunctionCallListRequest) (*FunctionCallListResponse, error)
	FunctionCallPutDataOut(context.Context, *FunctionCallPutDataRequest) (*emptypb.Empty, error)
	FunctionCreate(context.Context, *FunctionCreateRequest) (*FunctionCreateResponse, error)
	FunctionGet(context.Context, *FunctionGetRequest) (*FunctionGetResponse, error)
	FunctionGetCallGraph(context.Context, *FunctionGetCallGraphRequest) (*FunctionGetCallGraphResponse, error)
	FunctionGetCurrentStats(context.Context, *FunctionGetCurrentStatsRequest) (*FunctionStats, error)
	FunctionGetDynamicConcurrency(context.Context, *FunctionGetDynamicConcurrencyRequest) (*FunctionGetDynamicConcurrencyResponse, error)
	FunctionGetInputs(context.Context, *FunctionGetInputsRequest) (*FunctionGetInputsResponse, error)
	FunctionGetOutputs(context.Context, *FunctionGetOutputsRequest) (*FunctionGetOutputsResponse, error)
	FunctionGetSerialized(context.Context, *FunctionGetSerializedRequest) (*FunctionGetSerializedResponse, error)
	FunctionMap(context.Context, *FunctionMapRequest) (*FunctionMapResponse, error)
	FunctionPrecreate(context.Context, *FunctionPrecreateRequest) (*FunctionPrecreateResponse, error)
	FunctionPutInputs(context.Context, *FunctionPutInputsRequest) (*FunctionPutInputsResponse, error)
	FunctionPutOutputs(context.Context, *FunctionPutOutputsRequest) (*emptypb.Empty, error)
	FunctionRetryInputs(context.Context, *FunctionRetryInputsRequest) (*FunctionRetryInputsResponse, error)
	FunctionStartPtyShell(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	FunctionUpdateSchedulingParams(context.Context, *FunctionUpdateSchedulingParamsRequest) (*FunctionUpdateSchedulingParamsResponse, error)
	// Images
	ImageFromId(context.Context, *ImageFromIdRequest) (*ImageFromIdResponse, error)
	ImageGetOrCreate(context.Context, *ImageGetOrCreateRequest) (*ImageGetOrCreateResponse, error)
	ImageJoinStreaming(*ImageJoinStreamingRequest, grpc.ServerStreamingServer[ImageJoinStreamingResponse]) error
	// Mounts
	MountGetOrCreate(context.Context, *MountGetOrCreateRequest) (*MountGetOrCreateResponse, error)
	MountPutFile(context.Context, *MountPutFileRequest) (*MountPutFileResponse, error)
	// Notebooks
	NotebookKernelPublishResults(context.Context, *NotebookKernelPublishResultsRequest) (*emptypb.Empty, error)
	// Proxies
	ProxyAddIp(context.Context, *ProxyAddIpRequest) (*ProxyAddIpResponse, error)
	ProxyCreate(context.Context, *ProxyCreateRequest) (*ProxyCreateResponse, error)
	ProxyDelete(context.Context, *ProxyDeleteRequest) (*emptypb.Empty, error)
	ProxyGet(context.Context, *ProxyGetRequest) (*ProxyGetResponse, error)
	ProxyGetOrCreate(context.Context, *ProxyGetOrCreateRequest) (*ProxyGetOrCreateResponse, error)
	ProxyList(context.Context, *emptypb.Empty) (*ProxyListResponse, error)
	ProxyRemoveIp(context.Context, *ProxyRemoveIpRequest) (*emptypb.Empty, error)
	// Queues
	QueueClear(context.Context, *QueueClearRequest) (*emptypb.Empty, error)
	QueueDelete(context.Context, *QueueDeleteRequest) (*emptypb.Empty, error)
	QueueGet(context.Context, *QueueGetRequest) (*QueueGetResponse, error)
	QueueGetOrCreate(context.Context, *QueueGetOrCreateRequest) (*QueueGetOrCreateResponse, error)
	QueueHeartbeat(context.Context, *QueueHeartbeatRequest) (*emptypb.Empty, error)
	QueueLen(context.Context, *QueueLenRequest) (*QueueLenResponse, error)
	QueueList(context.Context, *QueueListRequest) (*QueueListResponse, error)
	QueueNextItems(context.Context, *QueueNextItemsRequest) (*QueueNextItemsResponse, error)
	QueuePut(context.Context, *QueuePutRequest) (*emptypb.Empty, error)
	// Sandboxes
	SandboxCreate(context.Context, *SandboxCreateRequest) (*SandboxCreateResponse, error)
	SandboxGetLogs(*SandboxGetLogsRequest, grpc.ServerStreamingServer[TaskLogsBatch]) error
	SandboxGetResourceUsage(context.Context, *SandboxGetResourceUsageRequest) (*SandboxGetResourceUsageResponse, error)
	SandboxGetTaskId(context.Context, *SandboxGetTaskIdRequest) (*SandboxGetTaskIdResponse, error)
	SandboxGetTunnels(context.Context, *SandboxGetTunnelsRequest) (*SandboxGetTunnelsResponse, error)
	SandboxList(context.Context, *SandboxListRequest) (*SandboxListResponse, error)
	SandboxRestore(context.Context, *SandboxRestoreRequest) (*SandboxRestoreResponse, error)
	SandboxSnapshot(context.Context, *SandboxSnapshotRequest) (*SandboxSnapshotResponse, error)
	SandboxSnapshotFs(context.Context, *SandboxSnapshotFsRequest) (*SandboxSnapshotFsResponse, error)
	SandboxSnapshotGet(context.Context, *SandboxSnapshotGetRequest) (*SandboxSnapshotGetResponse, error)
	SandboxSnapshotWait(context.Context, *SandboxSnapshotWaitRequest) (*SandboxSnapshotWaitResponse, error)
	SandboxStdinWrite(context.Context, *SandboxStdinWriteRequest) (*SandboxStdinWriteResponse, error)
	SandboxTagsSet(context.Context, *SandboxTagsSetRequest) (*emptypb.Empty, error)
	SandboxTerminate(context.Context, *SandboxTerminateRequest) (*SandboxTerminateResponse, error)
	SandboxWait(context.Context, *SandboxWaitRequest) (*SandboxWaitResponse, error)
	// Secrets
	SecretDelete(context.Context, *SecretDeleteRequest) (*emptypb.Empty, error)
	SecretGetOrCreate(context.Context, *SecretGetOrCreateRequest) (*SecretGetOrCreateResponse, error)
	SecretList(context.Context, *SecretListRequest) (*SecretListResponse, error)
	// SharedVolumes
	SharedVolumeDelete(context.Context, *SharedVolumeDeleteRequest) (*emptypb.Empty, error)
	SharedVolumeGetFile(context.Context, *SharedVolumeGetFileRequest) (*SharedVolumeGetFileResponse, error)
	SharedVolumeGetOrCreate(context.Context, *SharedVolumeGetOrCreateRequest) (*SharedVolumeGetOrCreateResponse, error)
	SharedVolumeHeartbeat(context.Context, *SharedVolumeHeartbeatRequest) (*emptypb.Empty, error)
	SharedVolumeList(context.Context, *SharedVolumeListRequest) (*SharedVolumeListResponse, error)
	SharedVolumeListFiles(context.Context, *SharedVolumeListFilesRequest) (*SharedVolumeListFilesResponse, error)
	SharedVolumeListFilesStream(*SharedVolumeListFilesRequest, grpc.ServerStreamingServer[SharedVolumeListFilesResponse]) error
	SharedVolumePutFile(context.Context, *SharedVolumePutFileRequest) (*SharedVolumePutFileResponse, error)
	SharedVolumeRemoveFile(context.Context, *SharedVolumeRemoveFileRequest) (*emptypb.Empty, error)
	// Tasks
	TaskClusterHello(context.Context, *TaskClusterHelloRequest) (*TaskClusterHelloResponse, error)
	TaskCurrentInputs(context.Context, *emptypb.Empty) (*TaskCurrentInputsResponse, error)
	TaskList(context.Context, *TaskListRequest) (*TaskListResponse, error)
	TaskResult(context.Context, *TaskResultRequest) (*emptypb.Empty, error)
	// Tokens (web auth flow)
	TokenFlowCreate(context.Context, *TokenFlowCreateRequest) (*TokenFlowCreateResponse, error)
	TokenFlowWait(context.Context, *TokenFlowWaitRequest) (*TokenFlowWaitResponse, error)
	// Tunnels
	TunnelStart(context.Context, *TunnelStartRequest) (*TunnelStartResponse, error)
	TunnelStop(context.Context, *TunnelStopRequest) (*TunnelStopResponse, error)
	// Volumes
	VolumeCommit(context.Context, *VolumeCommitRequest) (*VolumeCommitResponse, error)
	VolumeCopyFiles(context.Context, *VolumeCopyFilesRequest) (*emptypb.Empty, error)
	VolumeDelete(context.Context, *VolumeDeleteRequest) (*emptypb.Empty, error)
	VolumeGetFile(context.Context, *VolumeGetFileRequest) (*VolumeGetFileResponse, error)
	VolumeGetOrCreate(context.Context, *VolumeGetOrCreateRequest) (*VolumeGetOrCreateResponse, error)
	VolumeHeartbeat(context.Context, *VolumeHeartbeatRequest) (*emptypb.Empty, error)
	VolumeList(context.Context, *VolumeListRequest) (*VolumeListResponse, error)
	VolumeListFiles(*VolumeListFilesRequest, grpc.ServerStreamingServer[VolumeListFilesResponse]) error
	VolumePutFiles(context.Context, *VolumePutFilesRequest) (*emptypb.Empty, error)
	VolumePutFiles2(context.Context, *VolumePutFiles2Request) (*VolumePutFiles2Response, error)
	VolumeReload(context.Context, *VolumeReloadRequest) (*emptypb.Empty, error)
	VolumeRemoveFile(context.Context, *VolumeRemoveFileRequest) (*emptypb.Empty, error)
	VolumeRename(context.Context, *VolumeRenameRequest) (*emptypb.Empty, error)
	// Workspaces
	WorkspaceNameLookup(context.Context, *emptypb.Empty) (*WorkspaceNameLookupResponse, error)
	mustEmbedUnimplementedModalClientServer()
}

// UnimplementedModalClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModalClientServer struct{}

func (UnimplementedModalClientServer) AppClientDisconnect(context.Context, *AppClientDisconnectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppClientDisconnect not implemented")
}
func (UnimplementedModalClientServer) AppCreate(context.Context, *AppCreateRequest) (*AppCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppCreate not implemented")
}
func (UnimplementedModalClientServer) AppDeploy(context.Context, *AppDeployRequest) (*AppDeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppDeploy not implemented")
}
func (UnimplementedModalClientServer) AppDeploymentHistory(context.Context, *AppDeploymentHistoryRequest) (*AppDeploymentHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppDeploymentHistory not implemented")
}
func (UnimplementedModalClientServer) AppGetByDeploymentName(context.Context, *AppGetByDeploymentNameRequest) (*AppGetByDeploymentNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppGetByDeploymentName not implemented")
}
func (UnimplementedModalClientServer) AppGetLayout(context.Context, *AppGetLayoutRequest) (*AppGetLayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppGetLayout not implemented")
}
func (UnimplementedModalClientServer) AppGetLogs(*AppGetLogsRequest, grpc.ServerStreamingServer[TaskLogsBatch]) error {
	return status.Errorf(codes.Unimplemented, "method AppGetLogs not implemented")
}
func (UnimplementedModalClientServer) AppGetObjects(context.Context, *AppGetObjectsRequest) (*AppGetObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppGetObjects not implemented")
}
func (UnimplementedModalClientServer) AppGetOrCreate(context.Context, *AppGetOrCreateRequest) (*AppGetOrCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppGetOrCreate not implemented")
}
func (UnimplementedModalClientServer) AppHeartbeat(context.Context, *AppHeartbeatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppHeartbeat not implemented")
}
func (UnimplementedModalClientServer) AppList(context.Context, *AppListRequest) (*AppListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppList not implemented")
}
func (UnimplementedModalClientServer) AppLookup(context.Context, *AppLookupRequest) (*AppLookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppLookup not implemented")
}
func (UnimplementedModalClientServer) AppPublish(context.Context, *AppPublishRequest) (*AppPublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppPublish not implemented")
}
func (UnimplementedModalClientServer) AppRollback(context.Context, *AppRollbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRollback not implemented")
}
func (UnimplementedModalClientServer) AppSetObjects(context.Context, *AppSetObjectsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppSetObjects not implemented")
}
func (UnimplementedModalClientServer) AppStop(context.Context, *AppStopRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppStop not implemented")
}
func (UnimplementedModalClientServer) AttemptAwait(context.Context, *AttemptAwaitRequest) (*AttemptAwaitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttemptAwait not implemented")
}
func (UnimplementedModalClientServer) AttemptStart(context.Context, *AttemptStartRequest) (*AttemptStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttemptStart not implemented")
}
func (UnimplementedModalClientServer) BlobCreate(context.Context, *BlobCreateRequest) (*BlobCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlobCreate not implemented")
}
func (UnimplementedModalClientServer) BlobGet(context.Context, *BlobGetRequest) (*BlobGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlobGet not implemented")
}
func (UnimplementedModalClientServer) ClassCreate(context.Context, *ClassCreateRequest) (*ClassCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassCreate not implemented")
}
func (UnimplementedModalClientServer) ClassGet(context.Context, *ClassGetRequest) (*ClassGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassGet not implemented")
}
func (UnimplementedModalClientServer) ClientHello(context.Context, *emptypb.Empty) (*ClientHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientHello not implemented")
}
func (UnimplementedModalClientServer) ClusterGet(context.Context, *ClusterGetRequest) (*ClusterGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterGet not implemented")
}
func (UnimplementedModalClientServer) ClusterList(context.Context, *ClusterListRequest) (*ClusterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterList not implemented")
}
func (UnimplementedModalClientServer) ContainerCheckpoint(context.Context, *ContainerCheckpointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCheckpoint not implemented")
}
func (UnimplementedModalClientServer) ContainerExec(context.Context, *ContainerExecRequest) (*ContainerExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerExec not implemented")
}
func (UnimplementedModalClientServer) ContainerExecGetOutput(*ContainerExecGetOutputRequest, grpc.ServerStreamingServer[RuntimeOutputBatch]) error {
	return status.Errorf(codes.Unimplemented, "method ContainerExecGetOutput not implemented")
}
func (UnimplementedModalClientServer) ContainerExecPutInput(context.Context, *ContainerExecPutInputRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerExecPutInput not implemented")
}
func (UnimplementedModalClientServer) ContainerExecWait(context.Context, *ContainerExecWaitRequest) (*ContainerExecWaitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerExecWait not implemented")
}
func (UnimplementedModalClientServer) ContainerFilesystemExec(context.Context, *ContainerFilesystemExecRequest) (*ContainerFilesystemExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerFilesystemExec not implemented")
}
func (UnimplementedModalClientServer) ContainerFilesystemExecGetOutput(*ContainerFilesystemExecGetOutputRequest, grpc.ServerStreamingServer[FilesystemRuntimeOutputBatch]) error {
	return status.Errorf(codes.Unimplemented, "method ContainerFilesystemExecGetOutput not implemented")
}
func (UnimplementedModalClientServer) ContainerHeartbeat(context.Context, *ContainerHeartbeatRequest) (*ContainerHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerHeartbeat not implemented")
}
func (UnimplementedModalClientServer) ContainerHello(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerHello not implemented")
}
func (UnimplementedModalClientServer) ContainerLog(context.Context, *ContainerLogRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerLog not implemented")
}
func (UnimplementedModalClientServer) ContainerStop(context.Context, *ContainerStopRequest) (*ContainerStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerStop not implemented")
}
func (UnimplementedModalClientServer) DictClear(context.Context, *DictClearRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictClear not implemented")
}
func (UnimplementedModalClientServer) DictContains(context.Context, *DictContainsRequest) (*DictContainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictContains not implemented")
}
func (UnimplementedModalClientServer) DictContents(*DictContentsRequest, grpc.ServerStreamingServer[DictEntry]) error {
	return status.Errorf(codes.Unimplemented, "method DictContents not implemented")
}
func (UnimplementedModalClientServer) DictDelete(context.Context, *DictDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDelete not implemented")
}
func (UnimplementedModalClientServer) DictGet(context.Context, *DictGetRequest) (*DictGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictGet not implemented")
}
func (UnimplementedModalClientServer) DictGetOrCreate(context.Context, *DictGetOrCreateRequest) (*DictGetOrCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictGetOrCreate not implemented")
}
func (UnimplementedModalClientServer) DictHeartbeat(context.Context, *DictHeartbeatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictHeartbeat not implemented")
}
func (UnimplementedModalClientServer) DictLen(context.Context, *DictLenRequest) (*DictLenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictLen not implemented")
}
func (UnimplementedModalClientServer) DictList(context.Context, *DictListRequest) (*DictListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictList not implemented")
}
func (UnimplementedModalClientServer) DictPop(context.Context, *DictPopRequest) (*DictPopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictPop not implemented")
}
func (UnimplementedModalClientServer) DictUpdate(context.Context, *DictUpdateRequest) (*DictUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictUpdate not implemented")
}
func (UnimplementedModalClientServer) DomainCertificateVerify(context.Context, *DomainCertificateVerifyRequest) (*DomainCertificateVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainCertificateVerify not implemented")
}
func (UnimplementedModalClientServer) DomainCreate(context.Context, *DomainCreateRequest) (*DomainCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainCreate not implemented")
}
func (UnimplementedModalClientServer) DomainList(context.Context, *DomainListRequest) (*DomainListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainList not implemented")
}
func (UnimplementedModalClientServer) EnvironmentCreate(context.Context, *EnvironmentCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnvironmentCreate not implemented")
}
func (UnimplementedModalClientServer) EnvironmentDelete(context.Context, *EnvironmentDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnvironmentDelete not implemented")
}
func (UnimplementedModalClientServer) EnvironmentGetOrCreate(context.Context, *EnvironmentGetOrCreateRequest) (*EnvironmentGetOrCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnvironmentGetOrCreate not implemented")
}
func (UnimplementedModalClientServer) EnvironmentList(context.Context, *emptypb.Empty) (*EnvironmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnvironmentList not implemented")
}
func (UnimplementedModalClientServer) EnvironmentUpdate(context.Context, *EnvironmentUpdateRequest) (*EnvironmentListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnvironmentUpdate not implemented")
}
func (UnimplementedModalClientServer) FunctionAsyncInvoke(context.Context, *FunctionAsyncInvokeRequest) (*FunctionAsyncInvokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionAsyncInvoke not implemented")
}
func (UnimplementedModalClientServer) FunctionBindParams(context.Context, *FunctionBindParamsRequest) (*FunctionBindParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionBindParams not implemented")
}
func (UnimplementedModalClientServer) FunctionCallCancel(context.Context, *FunctionCallCancelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionCallCancel not implemented")
}
func (UnimplementedModalClientServer) FunctionCallGetDataIn(*FunctionCallGetDataRequest, grpc.ServerStreamingServer[DataChunk]) error {
	return status.Errorf(codes.Unimplemented, "method FunctionCallGetDataIn not implemented")
}
func (UnimplementedModalClientServer) FunctionCallGetDataOut(*FunctionCallGetDataRequest, grpc.ServerStreamingServer[DataChunk]) error {
	return status.Errorf(codes.Unimplemented, "method FunctionCallGetDataOut not implemented")
}
func (UnimplementedModalClientServer) FunctionCallList(context.Context, *FunctionCallListRequest) (*FunctionCallListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionCallList not implemented")
}
func (UnimplementedModalClientServer) FunctionCallPutDataOut(context.Context, *FunctionCallPutDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionCallPutDataOut not implemented")
}
func (UnimplementedModalClientServer) FunctionCreate(context.Context, *FunctionCreateRequest) (*FunctionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionCreate not implemented")
}
func (UnimplementedModalClientServer) FunctionGet(context.Context, *FunctionGetRequest) (*FunctionGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionGet not implemented")
}
func (UnimplementedModalClientServer) FunctionGetCallGraph(context.Context, *FunctionGetCallGraphRequest) (*FunctionGetCallGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionGetCallGraph not implemented")
}
func (UnimplementedModalClientServer) FunctionGetCurrentStats(context.Context, *FunctionGetCurrentStatsRequest) (*FunctionStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionGetCurrentStats not implemented")
}
func (UnimplementedModalClientServer) FunctionGetDynamicConcurrency(context.Context, *FunctionGetDynamicConcurrencyRequest) (*FunctionGetDynamicConcurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionGetDynamicConcurrency not implemented")
}
func (UnimplementedModalClientServer) FunctionGetInputs(context.Context, *FunctionGetInputsRequest) (*FunctionGetInputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionGetInputs not implemented")
}
func (UnimplementedModalClientServer) FunctionGetOutputs(context.Context, *FunctionGetOutputsRequest) (*FunctionGetOutputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionGetOutputs not implemented")
}
func (UnimplementedModalClientServer) FunctionGetSerialized(context.Context, *FunctionGetSerializedRequest) (*FunctionGetSerializedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionGetSerialized not implemented")
}
func (UnimplementedModalClientServer) FunctionMap(context.Context, *FunctionMapRequest) (*FunctionMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionMap not implemented")
}
func (UnimplementedModalClientServer) FunctionPrecreate(context.Context, *FunctionPrecreateRequest) (*FunctionPrecreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionPrecreate not implemented")
}
func (UnimplementedModalClientServer) FunctionPutInputs(context.Context, *FunctionPutInputsRequest) (*FunctionPutInputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionPutInputs not implemented")
}
func (UnimplementedModalClientServer) FunctionPutOutputs(context.Context, *FunctionPutOutputsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionPutOutputs not implemented")
}
func (UnimplementedModalClientServer) FunctionRetryInputs(context.Context, *FunctionRetryInputsRequest) (*FunctionRetryInputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionRetryInputs not implemented")
}
func (UnimplementedModalClientServer) FunctionStartPtyShell(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionStartPtyShell not implemented")
}
func (UnimplementedModalClientServer) FunctionUpdateSchedulingParams(context.Context, *FunctionUpdateSchedulingParamsRequest) (*FunctionUpdateSchedulingParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionUpdateSchedulingParams not implemented")
}
func (UnimplementedModalClientServer) ImageFromId(context.Context, *ImageFromIdRequest) (*ImageFromIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageFromId not implemented")
}
func (UnimplementedModalClientServer) ImageGetOrCreate(context.Context, *ImageGetOrCreateRequest) (*ImageGetOrCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageGetOrCreate not implemented")
}
func (UnimplementedModalClientServer) ImageJoinStreaming(*ImageJoinStreamingRequest, grpc.ServerStreamingServer[ImageJoinStreamingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ImageJoinStreaming not implemented")
}
func (UnimplementedModalClientServer) MountGetOrCreate(context.Context, *MountGetOrCreateRequest) (*MountGetOrCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountGetOrCreate not implemented")
}
func (UnimplementedModalClientServer) MountPutFile(context.Context, *MountPutFileRequest) (*MountPutFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountPutFile not implemented")
}
func (UnimplementedModalClientServer) NotebookKernelPublishResults(context.Context, *NotebookKernelPublishResultsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotebookKernelPublishResults not implemented")
}
func (UnimplementedModalClientServer) ProxyAddIp(context.Context, *ProxyAddIpRequest) (*ProxyAddIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyAddIp not implemented")
}
func (UnimplementedModalClientServer) ProxyCreate(context.Context, *ProxyCreateRequest) (*ProxyCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyCreate not implemented")
}
func (UnimplementedModalClientServer) ProxyDelete(context.Context, *ProxyDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyDelete not implemented")
}
func (UnimplementedModalClientServer) ProxyGet(context.Context, *ProxyGetRequest) (*ProxyGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyGet not implemented")
}
func (UnimplementedModalClientServer) ProxyGetOrCreate(context.Context, *ProxyGetOrCreateRequest) (*ProxyGetOrCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyGetOrCreate not implemented")
}
func (UnimplementedModalClientServer) ProxyList(context.Context, *emptypb.Empty) (*ProxyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyList not implemented")
}
func (UnimplementedModalClientServer) ProxyRemoveIp(context.Context, *ProxyRemoveIpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyRemoveIp not implemented")
}
func (UnimplementedModalClientServer) QueueClear(context.Context, *QueueClearRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueClear not implemented")
}
func (UnimplementedModalClientServer) QueueDelete(context.Context, *QueueDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueDelete not implemented")
}
func (UnimplementedModalClientServer) QueueGet(context.Context, *QueueGetRequest) (*QueueGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueGet not implemented")
}
func (UnimplementedModalClientServer) QueueGetOrCreate(context.Context, *QueueGetOrCreateRequest) (*QueueGetOrCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueGetOrCreate not implemented")
}
func (UnimplementedModalClientServer) QueueHeartbeat(context.Context, *QueueHeartbeatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueHeartbeat not implemented")
}
func (UnimplementedModalClientServer) QueueLen(context.Context, *QueueLenRequest) (*QueueLenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueLen not implemented")
}
func (UnimplementedModalClientServer) QueueList(context.Context, *QueueListRequest) (*QueueListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueList not implemented")
}
func (UnimplementedModalClientServer) QueueNextItems(context.Context, *QueueNextItemsRequest) (*QueueNextItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueNextItems not implemented")
}
func (UnimplementedModalClientServer) QueuePut(context.Context, *QueuePutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuePut not implemented")
}
func (UnimplementedModalClientServer) SandboxCreate(context.Context, *SandboxCreateRequest) (*SandboxCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxCreate not implemented")
}
func (UnimplementedModalClientServer) SandboxGetLogs(*SandboxGetLogsRequest, grpc.ServerStreamingServer[TaskLogsBatch]) error {
	return status.Errorf(codes.Unimplemented, "method SandboxGetLogs not implemented")
}
func (UnimplementedModalClientServer) SandboxGetResourceUsage(context.Context, *SandboxGetResourceUsageRequest) (*SandboxGetResourceUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxGetResourceUsage not implemented")
}
func (UnimplementedModalClientServer) SandboxGetTaskId(context.Context, *SandboxGetTaskIdRequest) (*SandboxGetTaskIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxGetTaskId not implemented")
}
func (UnimplementedModalClientServer) SandboxGetTunnels(context.Context, *SandboxGetTunnelsRequest) (*SandboxGetTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxGetTunnels not implemented")
}
func (UnimplementedModalClientServer) SandboxList(context.Context, *SandboxListRequest) (*SandboxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxList not implemented")
}
func (UnimplementedModalClientServer) SandboxRestore(context.Context, *SandboxRestoreRequest) (*SandboxRestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxRestore not implemented")
}
func (UnimplementedModalClientServer) SandboxSnapshot(context.Context, *SandboxSnapshotRequest) (*SandboxSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxSnapshot not implemented")
}
func (UnimplementedModalClientServer) SandboxSnapshotFs(context.Context, *SandboxSnapshotFsRequest) (*SandboxSnapshotFsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxSnapshotFs not implemented")
}
func (UnimplementedModalClientServer) SandboxSnapshotGet(context.Context, *SandboxSnapshotGetRequest) (*SandboxSnapshotGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxSnapshotGet not implemented")
}
func (UnimplementedModalClientServer) SandboxSnapshotWait(context.Context, *SandboxSnapshotWaitRequest) (*SandboxSnapshotWaitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxSnapshotWait not implemented")
}
func (UnimplementedModalClientServer) SandboxStdinWrite(context.Context, *SandboxStdinWriteRequest) (*SandboxStdinWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxStdinWrite not implemented")
}
func (UnimplementedModalClientServer) SandboxTagsSet(context.Context, *SandboxTagsSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxTagsSet not implemented")
}
func (UnimplementedModalClientServer) SandboxTerminate(context.Context, *SandboxTerminateRequest) (*SandboxTerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxTerminate not implemented")
}
func (UnimplementedModalClientServer) SandboxWait(context.Context, *SandboxWaitRequest) (*SandboxWaitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxWait not implemented")
}
func (UnimplementedModalClientServer) SecretDelete(context.Context, *SecretDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretDelete not implemented")
}
func (UnimplementedModalClientServer) SecretGetOrCreate(context.Context, *SecretGetOrCreateRequest) (*SecretGetOrCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretGetOrCreate not implemented")
}
func (UnimplementedModalClientServer) SecretList(context.Context, *SecretListRequest) (*SecretListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretList not implemented")
}
func (UnimplementedModalClientServer) SharedVolumeDelete(context.Context, *SharedVolumeDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedVolumeDelete not implemented")
}
func (UnimplementedModalClientServer) SharedVolumeGetFile(context.Context, *SharedVolumeGetFileRequest) (*SharedVolumeGetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedVolumeGetFile not implemented")
}
func (UnimplementedModalClientServer) SharedVolumeGetOrCreate(context.Context, *SharedVolumeGetOrCreateRequest) (*SharedVolumeGetOrCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedVolumeGetOrCreate not implemented")
}
func (UnimplementedModalClientServer) SharedVolumeHeartbeat(context.Context, *SharedVolumeHeartbeatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedVolumeHeartbeat not implemented")
}
func (UnimplementedModalClientServer) SharedVolumeList(context.Context, *SharedVolumeListRequest) (*SharedVolumeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedVolumeList not implemented")
}
func (UnimplementedModalClientServer) SharedVolumeListFiles(context.Context, *SharedVolumeListFilesRequest) (*SharedVolumeListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedVolumeListFiles not implemented")
}
func (UnimplementedModalClientServer) SharedVolumeListFilesStream(*SharedVolumeListFilesRequest, grpc.ServerStreamingServer[SharedVolumeListFilesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SharedVolumeListFilesStream not implemented")
}
func (UnimplementedModalClientServer) SharedVolumePutFile(context.Context, *SharedVolumePutFileRequest) (*SharedVolumePutFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedVolumePutFile not implemented")
}
func (UnimplementedModalClientServer) SharedVolumeRemoveFile(context.Context, *SharedVolumeRemoveFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedVolumeRemoveFile not implemented")
}
func (UnimplementedModalClientServer) TaskClusterHello(context.Context, *TaskClusterHelloRequest) (*TaskClusterHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskClusterHello not implemented")
}
func (UnimplementedModalClientServer) TaskCurrentInputs(context.Context, *emptypb.Empty) (*TaskCurrentInputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCurrentInputs not implemented")
}
func (UnimplementedModalClientServer) TaskList(context.Context, *TaskListRequest) (*TaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskList not implemented")
}
func (UnimplementedModalClientServer) TaskResult(context.Context, *TaskResultRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskResult not implemented")
}
func (UnimplementedModalClientServer) TokenFlowCreate(context.Context, *TokenFlowCreateRequest) (*TokenFlowCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenFlowCreate not implemented")
}
func (UnimplementedModalClientServer) TokenFlowWait(context.Context, *TokenFlowWaitRequest) (*TokenFlowWaitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenFlowWait not implemented")
}
func (UnimplementedModalClientServer) TunnelStart(context.Context, *TunnelStartRequest) (*TunnelStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TunnelStart not implemented")
}
func (UnimplementedModalClientServer) TunnelStop(context.Context, *TunnelStopRequest) (*TunnelStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TunnelStop not implemented")
}
func (UnimplementedModalClientServer) VolumeCommit(context.Context, *VolumeCommitRequest) (*VolumeCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeCommit not implemented")
}
func (UnimplementedModalClientServer) VolumeCopyFiles(context.Context, *VolumeCopyFilesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeCopyFiles not implemented")
}
func (UnimplementedModalClientServer) VolumeDelete(context.Context, *VolumeDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeDelete not implemented")
}
func (UnimplementedModalClientServer) VolumeGetFile(context.Context, *VolumeGetFileRequest) (*VolumeGetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeGetFile not implemented")
}
func (UnimplementedModalClientServer) VolumeGetOrCreate(context.Context, *VolumeGetOrCreateRequest) (*VolumeGetOrCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeGetOrCreate not implemented")
}
func (UnimplementedModalClientServer) VolumeHeartbeat(context.Context, *VolumeHeartbeatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeHeartbeat not implemented")
}
func (UnimplementedModalClientServer) VolumeList(context.Context, *VolumeListRequest) (*VolumeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeList not implemented")
}
func (UnimplementedModalClientServer) VolumeListFiles(*VolumeListFilesRequest, grpc.ServerStreamingServer[VolumeListFilesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method VolumeListFiles not implemented")
}
func (UnimplementedModalClientServer) VolumePutFiles(context.Context, *VolumePutFilesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumePutFiles not implemented")
}
func (UnimplementedModalClientServer) VolumePutFiles2(context.Context, *VolumePutFiles2Request) (*VolumePutFiles2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumePutFiles2 not implemented")
}
func (UnimplementedModalClientServer) VolumeReload(context.Context, *VolumeReloadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeReload not implemented")
}
func (UnimplementedModalClientServer) VolumeRemoveFile(context.Context, *VolumeRemoveFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeRemoveFile not implemented")
}
func (UnimplementedModalClientServer) VolumeRename(context.Context, *VolumeRenameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeRename not implemented")
}
func (UnimplementedModalClientServer) WorkspaceNameLookup(context.Context, *emptypb.Empty) (*WorkspaceNameLookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkspaceNameLookup not implemented")
}
func (UnimplementedModalClientServer) mustEmbedUnimplementedModalClientServer() {}
func (UnimplementedModalClientServer) testEmbeddedByValue()                     {}

// UnsafeModalClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModalClientServer will
// result in compilation errors.
type UnsafeModalClientServer interface {
	mustEmbedUnimplementedModalClientServer()
}

func RegisterModalClientServer(s grpc.ServiceRegistrar, srv ModalClientServer) {
	// If the following call pancis, it indicates UnimplementedModalClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModalClient_ServiceDesc, srv)
}

func _ModalClient_AppClientDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppClientDisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppClientDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppClientDisconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppClientDisconnect(ctx, req.(*AppClientDisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AppCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppCreate(ctx, req.(*AppCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AppDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppDeploy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppDeploy(ctx, req.(*AppDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AppDeploymentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDeploymentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppDeploymentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppDeploymentHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppDeploymentHistory(ctx, req.(*AppDeploymentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AppGetByDeploymentName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppGetByDeploymentNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppGetByDeploymentName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppGetByDeploymentName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppGetByDeploymentName(ctx, req.(*AppGetByDeploymentNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AppGetLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppGetLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppGetLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppGetLayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppGetLayout(ctx, req.(*AppGetLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AppGetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AppGetLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModalClientServer).AppGetLogs(m, &grpc.GenericServerStream[AppGetLogsRequest, TaskLogsBatch]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_AppGetLogsServer = grpc.ServerStreamingServer[TaskLogsBatch]

func _ModalClient_AppGetObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppGetObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppGetObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppGetObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppGetObjects(ctx, req.(*AppGetObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AppGetOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppGetOrCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppGetOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppGetOrCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppGetOrCreate(ctx, req.(*AppGetOrCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AppHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppHeartbeat(ctx, req.(*AppHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppList(ctx, req.(*AppListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AppLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppLookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppLookup(ctx, req.(*AppLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AppPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppPublish(ctx, req.(*AppPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AppRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppRollback(ctx, req.(*AppRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AppSetObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppSetObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppSetObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppSetObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppSetObjects(ctx, req.(*AppSetObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AppStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AppStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AppStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AppStop(ctx, req.(*AppStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AttemptAwait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttemptAwaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AttemptAwait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AttemptAwait_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AttemptAwait(ctx, req.(*AttemptAwaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_AttemptStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttemptStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).AttemptStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_AttemptStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).AttemptStart(ctx, req.(*AttemptStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_BlobCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlobCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).BlobCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_BlobCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).BlobCreate(ctx, req.(*BlobCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_BlobGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlobGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).BlobGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_BlobGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).BlobGet(ctx, req.(*BlobGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ClassCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ClassCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ClassCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ClassCreate(ctx, req.(*ClassCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ClassGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ClassGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ClassGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ClassGet(ctx, req.(*ClassGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ClientHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ClientHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ClientHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ClientHello(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ClusterGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ClusterGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ClusterGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ClusterGet(ctx, req.(*ClusterGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ClusterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ClusterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ClusterList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ClusterList(ctx, req.(*ClusterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ContainerCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ContainerCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ContainerCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ContainerCheckpoint(ctx, req.(*ContainerCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ContainerExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ContainerExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ContainerExec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ContainerExec(ctx, req.(*ContainerExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ContainerExecGetOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContainerExecGetOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModalClientServer).ContainerExecGetOutput(m, &grpc.GenericServerStream[ContainerExecGetOutputRequest, RuntimeOutputBatch]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_ContainerExecGetOutputServer = grpc.ServerStreamingServer[RuntimeOutputBatch]

func _ModalClient_ContainerExecPutInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerExecPutInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ContainerExecPutInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ContainerExecPutInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ContainerExecPutInput(ctx, req.(*ContainerExecPutInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ContainerExecWait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerExecWaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ContainerExecWait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ContainerExecWait_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ContainerExecWait(ctx, req.(*ContainerExecWaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ContainerFilesystemExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerFilesystemExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ContainerFilesystemExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ContainerFilesystemExec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ContainerFilesystemExec(ctx, req.(*ContainerFilesystemExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ContainerFilesystemExecGetOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContainerFilesystemExecGetOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModalClientServer).ContainerFilesystemExecGetOutput(m, &grpc.GenericServerStream[ContainerFilesystemExecGetOutputRequest, FilesystemRuntimeOutputBatch]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_ContainerFilesystemExecGetOutputServer = grpc.ServerStreamingServer[FilesystemRuntimeOutputBatch]

func _ModalClient_ContainerHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ContainerHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ContainerHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ContainerHeartbeat(ctx, req.(*ContainerHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ContainerHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ContainerHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ContainerHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ContainerHello(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ContainerLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ContainerLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ContainerLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ContainerLog(ctx, req.(*ContainerLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ContainerStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ContainerStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ContainerStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ContainerStop(ctx, req.(*ContainerStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_DictClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).DictClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_DictClear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).DictClear(ctx, req.(*DictClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_DictContains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictContainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).DictContains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_DictContains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).DictContains(ctx, req.(*DictContainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_DictContents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DictContentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModalClientServer).DictContents(m, &grpc.GenericServerStream[DictContentsRequest, DictEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_DictContentsServer = grpc.ServerStreamingServer[DictEntry]

func _ModalClient_DictDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).DictDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_DictDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).DictDelete(ctx, req.(*DictDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_DictGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).DictGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_DictGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).DictGet(ctx, req.(*DictGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_DictGetOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictGetOrCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).DictGetOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_DictGetOrCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).DictGetOrCreate(ctx, req.(*DictGetOrCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_DictHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).DictHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_DictHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).DictHeartbeat(ctx, req.(*DictHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_DictLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictLenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).DictLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_DictLen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).DictLen(ctx, req.(*DictLenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_DictList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).DictList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_DictList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).DictList(ctx, req.(*DictListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_DictPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictPopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).DictPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_DictPop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).DictPop(ctx, req.(*DictPopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_DictUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).DictUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_DictUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).DictUpdate(ctx, req.(*DictUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_DomainCertificateVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainCertificateVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).DomainCertificateVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_DomainCertificateVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).DomainCertificateVerify(ctx, req.(*DomainCertificateVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_DomainCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).DomainCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_DomainCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).DomainCreate(ctx, req.(*DomainCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_DomainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).DomainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_DomainList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).DomainList(ctx, req.(*DomainListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_EnvironmentCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).EnvironmentCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_EnvironmentCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).EnvironmentCreate(ctx, req.(*EnvironmentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_EnvironmentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).EnvironmentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_EnvironmentDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).EnvironmentDelete(ctx, req.(*EnvironmentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_EnvironmentGetOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentGetOrCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).EnvironmentGetOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_EnvironmentGetOrCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).EnvironmentGetOrCreate(ctx, req.(*EnvironmentGetOrCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_EnvironmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).EnvironmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_EnvironmentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).EnvironmentList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_EnvironmentUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).EnvironmentUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_EnvironmentUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).EnvironmentUpdate(ctx, req.(*EnvironmentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionAsyncInvoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionAsyncInvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionAsyncInvoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionAsyncInvoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionAsyncInvoke(ctx, req.(*FunctionAsyncInvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionBindParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionBindParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionBindParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionBindParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionBindParams(ctx, req.(*FunctionBindParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionCallCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionCallCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionCallCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionCallCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionCallCancel(ctx, req.(*FunctionCallCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionCallGetDataIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FunctionCallGetDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModalClientServer).FunctionCallGetDataIn(m, &grpc.GenericServerStream[FunctionCallGetDataRequest, DataChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_FunctionCallGetDataInServer = grpc.ServerStreamingServer[DataChunk]

func _ModalClient_FunctionCallGetDataOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FunctionCallGetDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModalClientServer).FunctionCallGetDataOut(m, &grpc.GenericServerStream[FunctionCallGetDataRequest, DataChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_FunctionCallGetDataOutServer = grpc.ServerStreamingServer[DataChunk]

func _ModalClient_FunctionCallList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionCallListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionCallList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionCallList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionCallList(ctx, req.(*FunctionCallListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionCallPutDataOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionCallPutDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionCallPutDataOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionCallPutDataOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionCallPutDataOut(ctx, req.(*FunctionCallPutDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionCreate(ctx, req.(*FunctionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionGet(ctx, req.(*FunctionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionGetCallGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionGetCallGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionGetCallGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionGetCallGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionGetCallGraph(ctx, req.(*FunctionGetCallGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionGetCurrentStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionGetCurrentStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionGetCurrentStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionGetCurrentStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionGetCurrentStats(ctx, req.(*FunctionGetCurrentStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionGetDynamicConcurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionGetDynamicConcurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionGetDynamicConcurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionGetDynamicConcurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionGetDynamicConcurrency(ctx, req.(*FunctionGetDynamicConcurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionGetInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionGetInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionGetInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionGetInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionGetInputs(ctx, req.(*FunctionGetInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionGetOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionGetOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionGetOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionGetOutputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionGetOutputs(ctx, req.(*FunctionGetOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionGetSerialized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionGetSerializedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionGetSerialized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionGetSerialized_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionGetSerialized(ctx, req.(*FunctionGetSerializedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionMap(ctx, req.(*FunctionMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionPrecreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionPrecreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionPrecreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionPrecreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionPrecreate(ctx, req.(*FunctionPrecreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionPutInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionPutInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionPutInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionPutInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionPutInputs(ctx, req.(*FunctionPutInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionPutOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionPutOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionPutOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionPutOutputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionPutOutputs(ctx, req.(*FunctionPutOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionRetryInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionRetryInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionRetryInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionRetryInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionRetryInputs(ctx, req.(*FunctionRetryInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionStartPtyShell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionStartPtyShell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionStartPtyShell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionStartPtyShell(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_FunctionUpdateSchedulingParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionUpdateSchedulingParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).FunctionUpdateSchedulingParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_FunctionUpdateSchedulingParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).FunctionUpdateSchedulingParams(ctx, req.(*FunctionUpdateSchedulingParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ImageFromId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageFromIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ImageFromId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ImageFromId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ImageFromId(ctx, req.(*ImageFromIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ImageGetOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageGetOrCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ImageGetOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ImageGetOrCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ImageGetOrCreate(ctx, req.(*ImageGetOrCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ImageJoinStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImageJoinStreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModalClientServer).ImageJoinStreaming(m, &grpc.GenericServerStream[ImageJoinStreamingRequest, ImageJoinStreamingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_ImageJoinStreamingServer = grpc.ServerStreamingServer[ImageJoinStreamingResponse]

func _ModalClient_MountGetOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountGetOrCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).MountGetOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_MountGetOrCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).MountGetOrCreate(ctx, req.(*MountGetOrCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_MountPutFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountPutFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).MountPutFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_MountPutFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).MountPutFile(ctx, req.(*MountPutFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_NotebookKernelPublishResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookKernelPublishResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).NotebookKernelPublishResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_NotebookKernelPublishResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).NotebookKernelPublishResults(ctx, req.(*NotebookKernelPublishResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ProxyAddIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyAddIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ProxyAddIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ProxyAddIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ProxyAddIp(ctx, req.(*ProxyAddIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ProxyCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ProxyCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ProxyCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ProxyCreate(ctx, req.(*ProxyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ProxyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ProxyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ProxyDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ProxyDelete(ctx, req.(*ProxyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ProxyGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ProxyGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ProxyGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ProxyGet(ctx, req.(*ProxyGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ProxyGetOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyGetOrCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ProxyGetOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ProxyGetOrCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ProxyGetOrCreate(ctx, req.(*ProxyGetOrCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ProxyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ProxyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ProxyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ProxyList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_ProxyRemoveIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRemoveIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).ProxyRemoveIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_ProxyRemoveIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).ProxyRemoveIp(ctx, req.(*ProxyRemoveIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_QueueClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).QueueClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_QueueClear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).QueueClear(ctx, req.(*QueueClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_QueueDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).QueueDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_QueueDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).QueueDelete(ctx, req.(*QueueDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_QueueGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).QueueGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_QueueGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).QueueGet(ctx, req.(*QueueGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_QueueGetOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueGetOrCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).QueueGetOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_QueueGetOrCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).QueueGetOrCreate(ctx, req.(*QueueGetOrCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_QueueHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).QueueHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_QueueHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).QueueHeartbeat(ctx, req.(*QueueHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_QueueLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueLenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).QueueLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_QueueLen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).QueueLen(ctx, req.(*QueueLenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_QueueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).QueueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_QueueList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).QueueList(ctx, req.(*QueueListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_QueueNextItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueNextItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).QueueNextItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_QueueNextItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).QueueNextItems(ctx, req.(*QueueNextItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_QueuePut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuePutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).QueuePut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_QueuePut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).QueuePut(ctx, req.(*QueuePutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SandboxCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SandboxCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SandboxCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SandboxCreate(ctx, req.(*SandboxCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SandboxGetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SandboxGetLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModalClientServer).SandboxGetLogs(m, &grpc.GenericServerStream[SandboxGetLogsRequest, TaskLogsBatch]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_SandboxGetLogsServer = grpc.ServerStreamingServer[TaskLogsBatch]

func _ModalClient_SandboxGetResourceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxGetResourceUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SandboxGetResourceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SandboxGetResourceUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SandboxGetResourceUsage(ctx, req.(*SandboxGetResourceUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SandboxGetTaskId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxGetTaskIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SandboxGetTaskId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SandboxGetTaskId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SandboxGetTaskId(ctx, req.(*SandboxGetTaskIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SandboxGetTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxGetTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SandboxGetTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SandboxGetTunnels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SandboxGetTunnels(ctx, req.(*SandboxGetTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SandboxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SandboxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SandboxList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SandboxList(ctx, req.(*SandboxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SandboxRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SandboxRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SandboxRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SandboxRestore(ctx, req.(*SandboxRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SandboxSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SandboxSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SandboxSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SandboxSnapshot(ctx, req.(*SandboxSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SandboxSnapshotFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxSnapshotFsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SandboxSnapshotFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SandboxSnapshotFs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SandboxSnapshotFs(ctx, req.(*SandboxSnapshotFsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SandboxSnapshotGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxSnapshotGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SandboxSnapshotGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SandboxSnapshotGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SandboxSnapshotGet(ctx, req.(*SandboxSnapshotGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SandboxSnapshotWait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxSnapshotWaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SandboxSnapshotWait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SandboxSnapshotWait_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SandboxSnapshotWait(ctx, req.(*SandboxSnapshotWaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SandboxStdinWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxStdinWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SandboxStdinWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SandboxStdinWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SandboxStdinWrite(ctx, req.(*SandboxStdinWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SandboxTagsSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxTagsSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SandboxTagsSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SandboxTagsSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SandboxTagsSet(ctx, req.(*SandboxTagsSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SandboxTerminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxTerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SandboxTerminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SandboxTerminate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SandboxTerminate(ctx, req.(*SandboxTerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SandboxWait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxWaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SandboxWait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SandboxWait_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SandboxWait(ctx, req.(*SandboxWaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SecretDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SecretDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SecretDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SecretDelete(ctx, req.(*SecretDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SecretGetOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretGetOrCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SecretGetOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SecretGetOrCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SecretGetOrCreate(ctx, req.(*SecretGetOrCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SecretList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SecretList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SecretList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SecretList(ctx, req.(*SecretListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SharedVolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedVolumeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SharedVolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SharedVolumeDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SharedVolumeDelete(ctx, req.(*SharedVolumeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SharedVolumeGetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedVolumeGetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SharedVolumeGetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SharedVolumeGetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SharedVolumeGetFile(ctx, req.(*SharedVolumeGetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SharedVolumeGetOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedVolumeGetOrCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SharedVolumeGetOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SharedVolumeGetOrCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SharedVolumeGetOrCreate(ctx, req.(*SharedVolumeGetOrCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SharedVolumeHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedVolumeHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SharedVolumeHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SharedVolumeHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SharedVolumeHeartbeat(ctx, req.(*SharedVolumeHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SharedVolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedVolumeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SharedVolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SharedVolumeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SharedVolumeList(ctx, req.(*SharedVolumeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SharedVolumeListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedVolumeListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SharedVolumeListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SharedVolumeListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SharedVolumeListFiles(ctx, req.(*SharedVolumeListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SharedVolumeListFilesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SharedVolumeListFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModalClientServer).SharedVolumeListFilesStream(m, &grpc.GenericServerStream[SharedVolumeListFilesRequest, SharedVolumeListFilesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_SharedVolumeListFilesStreamServer = grpc.ServerStreamingServer[SharedVolumeListFilesResponse]

func _ModalClient_SharedVolumePutFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedVolumePutFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SharedVolumePutFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SharedVolumePutFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SharedVolumePutFile(ctx, req.(*SharedVolumePutFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_SharedVolumeRemoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedVolumeRemoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).SharedVolumeRemoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_SharedVolumeRemoveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).SharedVolumeRemoveFile(ctx, req.(*SharedVolumeRemoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_TaskClusterHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskClusterHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).TaskClusterHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_TaskClusterHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).TaskClusterHello(ctx, req.(*TaskClusterHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_TaskCurrentInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).TaskCurrentInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_TaskCurrentInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).TaskCurrentInputs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_TaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).TaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_TaskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).TaskList(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_TaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).TaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_TaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).TaskResult(ctx, req.(*TaskResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_TokenFlowCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenFlowCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).TokenFlowCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_TokenFlowCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).TokenFlowCreate(ctx, req.(*TokenFlowCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_TokenFlowWait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenFlowWaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).TokenFlowWait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_TokenFlowWait_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).TokenFlowWait(ctx, req.(*TokenFlowWaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_TunnelStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunnelStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).TunnelStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_TunnelStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).TunnelStart(ctx, req.(*TunnelStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_TunnelStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunnelStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).TunnelStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_TunnelStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).TunnelStop(ctx, req.(*TunnelStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_VolumeCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).VolumeCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_VolumeCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).VolumeCommit(ctx, req.(*VolumeCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_VolumeCopyFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeCopyFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).VolumeCopyFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_VolumeCopyFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).VolumeCopyFiles(ctx, req.(*VolumeCopyFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_VolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).VolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_VolumeDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).VolumeDelete(ctx, req.(*VolumeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_VolumeGetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeGetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).VolumeGetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_VolumeGetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).VolumeGetFile(ctx, req.(*VolumeGetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_VolumeGetOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeGetOrCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).VolumeGetOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_VolumeGetOrCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).VolumeGetOrCreate(ctx, req.(*VolumeGetOrCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_VolumeHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).VolumeHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_VolumeHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).VolumeHeartbeat(ctx, req.(*VolumeHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_VolumeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).VolumeList(ctx, req.(*VolumeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_VolumeListFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VolumeListFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModalClientServer).VolumeListFiles(m, &grpc.GenericServerStream[VolumeListFilesRequest, VolumeListFilesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModalClient_VolumeListFilesServer = grpc.ServerStreamingServer[VolumeListFilesResponse]

func _ModalClient_VolumePutFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumePutFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).VolumePutFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_VolumePutFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).VolumePutFiles(ctx, req.(*VolumePutFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_VolumePutFiles2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumePutFiles2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).VolumePutFiles2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_VolumePutFiles2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).VolumePutFiles2(ctx, req.(*VolumePutFiles2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_VolumeReload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeReloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).VolumeReload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_VolumeReload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).VolumeReload(ctx, req.(*VolumeReloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_VolumeRemoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRemoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).VolumeRemoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_VolumeRemoveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).VolumeRemoveFile(ctx, req.(*VolumeRemoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_VolumeRename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).VolumeRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_VolumeRename_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).VolumeRename(ctx, req.(*VolumeRenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModalClient_WorkspaceNameLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalClientServer).WorkspaceNameLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModalClient_WorkspaceNameLookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalClientServer).WorkspaceNameLookup(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ModalClient_ServiceDesc is the grpc.ServiceDesc for ModalClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModalClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modal.client.ModalClient",
	HandlerType: (*ModalClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppClientDisconnect",
			Handler:    _ModalClient_AppClientDisconnect_Handler,
		},
		{
			MethodName: "AppCreate",
			Handler:    _ModalClient_AppCreate_Handler,
		},
		{
			MethodName: "AppDeploy",
			Handler:    _ModalClient_AppDeploy_Handler,
		},
		{
			MethodName: "AppDeploymentHistory",
			Handler:    _ModalClient_AppDeploymentHistory_Handler,
		},
		{
			MethodName: "AppGetByDeploymentName",
			Handler:    _ModalClient_AppGetByDeploymentName_Handler,
		},
		{
			MethodName: "AppGetLayout",
			Handler:    _ModalClient_AppGetLayout_Handler,
		},
		{
			MethodName: "AppGetObjects",
			Handler:    _ModalClient_AppGetObjects_Handler,
		},
		{
			MethodName: "AppGetOrCreate",
			Handler:    _ModalClient_AppGetOrCreate_Handler,
		},
		{
			MethodName: "AppHeartbeat",
			Handler:    _ModalClient_AppHeartbeat_Handler,
		},
		{
			MethodName: "AppList",
			Handler:    _ModalClient_AppList_Handler,
		},
		{
			MethodName: "AppLookup",
			Handler:    _ModalClient_AppLookup_Handler,
		},
		{
			MethodName: "AppPublish",
			Handler:    _ModalClient_AppPublish_Handler,
		},
		{
			MethodName: "AppRollback",
			Handler:    _ModalClient_AppRollback_Handler,
		},
		{
			MethodName: "AppSetObjects",
			Handler:    _ModalClient_AppSetObjects_Handler,
		},
		{
			MethodName: "AppStop",
			Handler:    _ModalClient_AppStop_Handler,
		},
		{
			MethodName: "AttemptAwait",
			Handler:    _ModalClient_AttemptAwait_Handler,
		},
		{
			MethodName: "AttemptStart",
			Handler:    _ModalClient_AttemptStart_Handler,
		},
		{
			MethodName: "BlobCreate",
			Handler:    _ModalClient_BlobCreate_Handler,
		},
		{
			MethodName: "BlobGet",
			Handler:    _ModalClient_BlobGet_Handler,
		},
		{
			MethodName: "ClassCreate",
			Handler:    _ModalClient_ClassCreate_Handler,
		},
		{
			MethodName: "ClassGet",
			Handler:    _ModalClient_ClassGet_Handler,
		},
		{
			MethodName: "ClientHello",
			Handler:    _ModalClient_ClientHello_Handler,
		},
		{
			MethodName: "ClusterGet",
			Handler:    _ModalClient_ClusterGet_Handler,
		},
		{
			MethodName: "ClusterList",
			Handler:    _ModalClient_ClusterList_Handler,
		},
		{
			MethodName: "ContainerCheckpoint",
			Handler:    _ModalClient_ContainerCheckpoint_Handler,
		},
		{
			MethodName: "ContainerExec",
			Handler:    _ModalClient_ContainerExec_Handler,
		},
		{
			MethodName: "ContainerExecPutInput",
			Handler:    _ModalClient_ContainerExecPutInput_Handler,
		},
		{
			MethodName: "ContainerExecWait",
			Handler:    _ModalClient_ContainerExecWait_Handler,
		},
		{
			MethodName: "ContainerFilesystemExec",
			Handler:    _ModalClient_ContainerFilesystemExec_Handler,
		},
		{
			MethodName: "ContainerHeartbeat",
			Handler:    _ModalClient_ContainerHeartbeat_Handler,
		},
		{
			MethodName: "ContainerHello",
			Handler:    _ModalClient_ContainerHello_Handler,
		},
		{
			MethodName: "ContainerLog",
			Handler:    _ModalClient_ContainerLog_Handler,
		},
		{
			MethodName: "ContainerStop",
			Handler:    _ModalClient_ContainerStop_Handler,
		},
		{
			MethodName: "DictClear",
			Handler:    _ModalClient_DictClear_Handler,
		},
		{
			MethodName: "DictContains",
			Handler:    _ModalClient_DictContains_Handler,
		},
		{
			MethodName: "DictDelete",
			Handler:    _ModalClient_DictDelete_Handler,
		},
		{
			MethodName: "DictGet",
			Handler:    _ModalClient_DictGet_Handler,
		},
		{
			MethodName: "DictGetOrCreate",
			Handler:    _ModalClient_DictGetOrCreate_Handler,
		},
		{
			MethodName: "DictHeartbeat",
			Handler:    _ModalClient_DictHeartbeat_Handler,
		},
		{
			MethodName: "DictLen",
			Handler:    _ModalClient_DictLen_Handler,
		},
		{
			MethodName: "DictList",
			Handler:    _ModalClient_DictList_Handler,
		},
		{
			MethodName: "DictPop",
			Handler:    _ModalClient_DictPop_Handler,
		},
		{
			MethodName: "DictUpdate",
			Handler:    _ModalClient_DictUpdate_Handler,
		},
		{
			MethodName: "DomainCertificateVerify",
			Handler:    _ModalClient_DomainCertificateVerify_Handler,
		},
		{
			MethodName: "DomainCreate",
			Handler:    _ModalClient_DomainCreate_Handler,
		},
		{
			MethodName: "DomainList",
			Handler:    _ModalClient_DomainList_Handler,
		},
		{
			MethodName: "EnvironmentCreate",
			Handler:    _ModalClient_EnvironmentCreate_Handler,
		},
		{
			MethodName: "EnvironmentDelete",
			Handler:    _ModalClient_EnvironmentDelete_Handler,
		},
		{
			MethodName: "EnvironmentGetOrCreate",
			Handler:    _ModalClient_EnvironmentGetOrCreate_Handler,
		},
		{
			MethodName: "EnvironmentList",
			Handler:    _ModalClient_EnvironmentList_Handler,
		},
		{
			MethodName: "EnvironmentUpdate",
			Handler:    _ModalClient_EnvironmentUpdate_Handler,
		},
		{
			MethodName: "FunctionAsyncInvoke",
			Handler:    _ModalClient_FunctionAsyncInvoke_Handler,
		},
		{
			MethodName: "FunctionBindParams",
			Handler:    _ModalClient_FunctionBindParams_Handler,
		},
		{
			MethodName: "FunctionCallCancel",
			Handler:    _ModalClient_FunctionCallCancel_Handler,
		},
		{
			MethodName: "FunctionCallList",
			Handler:    _ModalClient_FunctionCallList_Handler,
		},
		{
			MethodName: "FunctionCallPutDataOut",
			Handler:    _ModalClient_FunctionCallPutDataOut_Handler,
		},
		{
			MethodName: "FunctionCreate",
			Handler:    _ModalClient_FunctionCreate_Handler,
		},
		{
			MethodName: "FunctionGet",
			Handler:    _ModalClient_FunctionGet_Handler,
		},
		{
			MethodName: "FunctionGetCallGraph",
			Handler:    _ModalClient_FunctionGetCallGraph_Handler,
		},
		{
			MethodName: "FunctionGetCurrentStats",
			Handler:    _ModalClient_FunctionGetCurrentStats_Handler,
		},
		{
			MethodName: "FunctionGetDynamicConcurrency",
			Handler:    _ModalClient_FunctionGetDynamicConcurrency_Handler,
		},
		{
			MethodName: "FunctionGetInputs",
			Handler:    _ModalClient_FunctionGetInputs_Handler,
		},
		{
			MethodName: "FunctionGetOutputs",
			Handler:    _ModalClient_FunctionGetOutputs_Handler,
		},
		{
			MethodName: "FunctionGetSerialized",
			Handler:    _ModalClient_FunctionGetSerialized_Handler,
		},
		{
			MethodName: "FunctionMap",
			Handler:    _ModalClient_FunctionMap_Handler,
		},
		{
			MethodName: "FunctionPrecreate",
			Handler:    _ModalClient_FunctionPrecreate_Handler,
		},
		{
			MethodName: "FunctionPutInputs",
			Handler:    _ModalClient_FunctionPutInputs_Handler,
		},
		{
			MethodName: "FunctionPutOutputs",
			Handler:    _ModalClient_FunctionPutOutputs_Handler,
		},
		{
			MethodName: "FunctionRetryInputs",
			Handler:    _ModalClient_FunctionRetryInputs_Handler,
		},
		{
			MethodName: "FunctionStartPtyShell",
			Handler:    _ModalClient_FunctionStartPtyShell_Handler,
		},
		{
			MethodName: "FunctionUpdateSchedulingParams",
			Handler:    _ModalClient_FunctionUpdateSchedulingParams_Handler,
		},
		{
			MethodName: "ImageFromId",
			Handler:    _ModalClient_ImageFromId_Handler,
		},
		{
			MethodName: "ImageGetOrCreate",
			Handler:    _ModalClient_ImageGetOrCreate_Handler,
		},
		{
			MethodName: "MountGetOrCreate",
			Handler:    _ModalClient_MountGetOrCreate_Handler,
		},
		{
			MethodName: "MountPutFile",
			Handler:    _ModalClient_MountPutFile_Handler,
		},
		{
			MethodName: "NotebookKernelPublishResults",
			Handler:    _ModalClient_NotebookKernelPublishResults_Handler,
		},
		{
			MethodName: "ProxyAddIp",
			Handler:    _ModalClient_ProxyAddIp_Handler,
		},
		{
			MethodName: "ProxyCreate",
			Handler:    _ModalClient_ProxyCreate_Handler,
		},
		{
			MethodName: "ProxyDelete",
			Handler:    _ModalClient_ProxyDelete_Handler,
		},
		{
			MethodName: "ProxyGet",
			Handler:    _ModalClient_ProxyGet_Handler,
		},
		{
			MethodName: "ProxyGetOrCreate",
			Handler:    _ModalClient_ProxyGetOrCreate_Handler,
		},
		{
			MethodName: "ProxyList",
			Handler:    _ModalClient_ProxyList_Handler,
		},
		{
			MethodName: "ProxyRemoveIp",
			Handler:    _ModalClient_ProxyRemoveIp_Handler,
		},
		{
			MethodName: "QueueClear",
			Handler:    _ModalClient_QueueClear_Handler,
		},
		{
			MethodName: "QueueDelete",
			Handler:    _ModalClient_QueueDelete_Handler,
		},
		{
			MethodName: "QueueGet",
			Handler:    _ModalClient_QueueGet_Handler,
		},
		{
			MethodName: "QueueGetOrCreate",
			Handler:    _ModalClient_QueueGetOrCreate_Handler,
		},
		{
			MethodName: "QueueHeartbeat",
			Handler:    _ModalClient_QueueHeartbeat_Handler,
		},
		{
			MethodName: "QueueLen",
			Handler:    _ModalClient_QueueLen_Handler,
		},
		{
			MethodName: "QueueList",
			Handler:    _ModalClient_QueueList_Handler,
		},
		{
			MethodName: "QueueNextItems",
			Handler:    _ModalClient_QueueNextItems_Handler,
		},
		{
			MethodName: "QueuePut",
			Handler:    _ModalClient_QueuePut_Handler,
		},
		{
			MethodName: "SandboxCreate",
			Handler:    _ModalClient_SandboxCreate_Handler,
		},
		{
			MethodName: "SandboxGetResourceUsage",
			Handler:    _ModalClient_SandboxGetResourceUsage_Handler,
		},
		{
			MethodName: "SandboxGetTaskId",
			Handler:    _ModalClient_SandboxGetTaskId_Handler,
		},
		{
			MethodName: "SandboxGetTunnels",
			Handler:    _ModalClient_SandboxGetTunnels_Handler,
		},
		{
			MethodName: "SandboxList",
			Handler:    _ModalClient_SandboxList_Handler,
		},
		{
			MethodName: "SandboxRestore",
			Handler:    _ModalClient_SandboxRestore_Handler,
		},
		{
			MethodName: "SandboxSnapshot",
			Handler:    _ModalClient_SandboxSnapshot_Handler,
		},
		{
			MethodName: "SandboxSnapshotFs",
			Handler:    _ModalClient_SandboxSnapshotFs_Handler,
		},
		{
			MethodName: "SandboxSnapshotGet",
			Handler:    _ModalClient_SandboxSnapshotGet_Handler,
		},
		{
			MethodName: "SandboxSnapshotWait",
			Handler:    _ModalClient_SandboxSnapshotWait_Handler,
		},
		{
			MethodName: "SandboxStdinWrite",
			Handler:    _ModalClient_SandboxStdinWrite_Handler,
		},
		{
			MethodName: "SandboxTagsSet",
			Handler:    _ModalClient_SandboxTagsSet_Handler,
		},
		{
			MethodName: "SandboxTerminate",
			Handler:    _ModalClient_SandboxTerminate_Handler,
		},
		{
			MethodName: "SandboxWait",
			Handler:    _ModalClient_SandboxWait_Handler,
		},
		{
			MethodName: "SecretDelete",
			Handler:    _ModalClient_SecretDelete_Handler,
		},
		{
			MethodName: "SecretGetOrCreate",
			Handler:    _ModalClient_SecretGetOrCreate_Handler,
		},
		{
			MethodName: "SecretList",
			Handler:    _ModalClient_SecretList_Handler,
		},
		{
			MethodName: "SharedVolumeDelete",
			Handler:    _ModalClient_SharedVolumeDelete_Handler,
		},
		{
			MethodName: "SharedVolumeGetFile",
			Handler:    _ModalClient_SharedVolumeGetFile_Handler,
		},
		{
			MethodName: "SharedVolumeGetOrCreate",
			Handler:    _ModalClient_SharedVolumeGetOrCreate_Handler,
		},
		{
			MethodName: "SharedVolumeHeartbeat",
			Handler:    _ModalClient_SharedVolumeHeartbeat_Handler,
		},
		{
			MethodName: "SharedVolumeList",
			Handler:    _ModalClient_SharedVolumeList_Handler,
		},
		{
			MethodName: "SharedVolumeListFiles",
			Handler:    _ModalClient_SharedVolumeListFiles_Handler,
		},
		{
			MethodName: "SharedVolumePutFile",
			Handler:    _ModalClient_SharedVolumePutFile_Handler,
		},
		{
			MethodName: "SharedVolumeRemoveFile",
			Handler:    _ModalClient_SharedVolumeRemoveFile_Handler,
		},
		{
			MethodName: "TaskClusterHello",
			Handler:    _ModalClient_TaskClusterHello_Handler,
		},
		{
			MethodName: "TaskCurrentInputs",
			Handler:    _ModalClient_TaskCurrentInputs_Handler,
		},
		{
			MethodName: "TaskList",
			Handler:    _ModalClient_TaskList_Handler,
		},
		{
			MethodName: "TaskResult",
			Handler:    _ModalClient_TaskResult_Handler,
		},
		{
			MethodName: "TokenFlowCreate",
			Handler:    _ModalClient_TokenFlowCreate_Handler,
		},
		{
			MethodName: "TokenFlowWait",
			Handler:    _ModalClient_TokenFlowWait_Handler,
		},
		{
			MethodName: "TunnelStart",
			Handler:    _ModalClient_TunnelStart_Handler,
		},
		{
			MethodName: "TunnelStop",
			Handler:    _ModalClient_TunnelStop_Handler,
		},
		{
			MethodName: "VolumeCommit",
			Handler:    _ModalClient_VolumeCommit_Handler,
		},
		{
			MethodName: "VolumeCopyFiles",
			Handler:    _ModalClient_VolumeCopyFiles_Handler,
		},
		{
			MethodName: "VolumeDelete",
			Handler:    _ModalClient_VolumeDelete_Handler,
		},
		{
			MethodName: "VolumeGetFile",
			Handler:    _ModalClient_VolumeGetFile_Handler,
		},
		{
			MethodName: "VolumeGetOrCreate",
			Handler:    _ModalClient_VolumeGetOrCreate_Handler,
		},
		{
			MethodName: "VolumeHeartbeat",
			Handler:    _ModalClient_VolumeHeartbeat_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _ModalClient_VolumeList_Handler,
		},
		{
			MethodName: "VolumePutFiles",
			Handler:    _ModalClient_VolumePutFiles_Handler,
		},
		{
			MethodName: "VolumePutFiles2",
			Handler:    _ModalClient_VolumePutFiles2_Handler,
		},
		{
			MethodName: "VolumeReload",
			Handler:    _ModalClient_VolumeReload_Handler,
		},
		{
			MethodName: "VolumeRemoveFile",
			Handler:    _ModalClient_VolumeRemoveFile_Handler,
		},
		{
			MethodName: "VolumeRename",
			Handler:    _ModalClient_VolumeRename_Handler,
		},
		{
			MethodName: "WorkspaceNameLookup",
			Handler:    _ModalClient_WorkspaceNameLookup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AppGetLogs",
			Handler:       _ModalClient_AppGetLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ContainerExecGetOutput",
			Handler:       _ModalClient_ContainerExecGetOutput_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ContainerFilesystemExecGetOutput",
			Handler:       _ModalClient_ContainerFilesystemExecGetOutput_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DictContents",
			Handler:       _ModalClient_DictContents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FunctionCallGetDataIn",
			Handler:       _ModalClient_FunctionCallGetDataIn_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FunctionCallGetDataOut",
			Handler:       _ModalClient_FunctionCallGetDataOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ImageJoinStreaming",
			Handler:       _ModalClient_ImageJoinStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SandboxGetLogs",
			Handler:       _ModalClient_SandboxGetLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SharedVolumeListFilesStream",
			Handler:       _ModalClient_SharedVolumeListFilesStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "VolumeListFiles",
			Handler:       _ModalClient_VolumeListFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "modal_proto/api.proto",
}
