// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.1
// source: modal_proto/task_command_router.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskExecStderrConfig int32

const (
	// The output will be discarded.
	TaskExecStderrConfig_TASK_EXEC_STDERR_CONFIG_DEVNULL TaskExecStderrConfig = 0
	// The output will be streamed to the client.
	TaskExecStderrConfig_TASK_EXEC_STDERR_CONFIG_PIPE TaskExecStderrConfig = 1
	// A special value that can be used to indicate that the stderr stream should
	// be merged with the stdout stream.
	TaskExecStderrConfig_TASK_EXEC_STDERR_CONFIG_STDOUT TaskExecStderrConfig = 2
)

// Enum value maps for TaskExecStderrConfig.
var (
	TaskExecStderrConfig_name = map[int32]string{
		0: "TASK_EXEC_STDERR_CONFIG_DEVNULL",
		1: "TASK_EXEC_STDERR_CONFIG_PIPE",
		2: "TASK_EXEC_STDERR_CONFIG_STDOUT",
	}
	TaskExecStderrConfig_value = map[string]int32{
		"TASK_EXEC_STDERR_CONFIG_DEVNULL": 0,
		"TASK_EXEC_STDERR_CONFIG_PIPE":    1,
		"TASK_EXEC_STDERR_CONFIG_STDOUT":  2,
	}
)

func (x TaskExecStderrConfig) Enum() *TaskExecStderrConfig {
	p := new(TaskExecStderrConfig)
	*p = x
	return p
}

func (x TaskExecStderrConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskExecStderrConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_modal_proto_task_command_router_proto_enumTypes[0].Descriptor()
}

func (TaskExecStderrConfig) Type() protoreflect.EnumType {
	return &file_modal_proto_task_command_router_proto_enumTypes[0]
}

func (x TaskExecStderrConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type TaskExecStdioFileDescriptor int32

const (
	// Read from stdout.
	TaskExecStdioFileDescriptor_TASK_EXEC_STDIO_FILE_DESCRIPTOR_STDOUT TaskExecStdioFileDescriptor = 0
	// Read from stderr.
	TaskExecStdioFileDescriptor_TASK_EXEC_STDIO_FILE_DESCRIPTOR_STDERR TaskExecStdioFileDescriptor = 1
)

// Enum value maps for TaskExecStdioFileDescriptor.
var (
	TaskExecStdioFileDescriptor_name = map[int32]string{
		0: "TASK_EXEC_STDIO_FILE_DESCRIPTOR_STDOUT",
		1: "TASK_EXEC_STDIO_FILE_DESCRIPTOR_STDERR",
	}
	TaskExecStdioFileDescriptor_value = map[string]int32{
		"TASK_EXEC_STDIO_FILE_DESCRIPTOR_STDOUT": 0,
		"TASK_EXEC_STDIO_FILE_DESCRIPTOR_STDERR": 1,
	}
)

func (x TaskExecStdioFileDescriptor) Enum() *TaskExecStdioFileDescriptor {
	p := new(TaskExecStdioFileDescriptor)
	*p = x
	return p
}

func (x TaskExecStdioFileDescriptor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskExecStdioFileDescriptor) Descriptor() protoreflect.EnumDescriptor {
	return file_modal_proto_task_command_router_proto_enumTypes[1].Descriptor()
}

func (TaskExecStdioFileDescriptor) Type() protoreflect.EnumType {
	return &file_modal_proto_task_command_router_proto_enumTypes[1]
}

func (x TaskExecStdioFileDescriptor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type TaskExecStdoutConfig int32

const (
	// The output will be discarded.
	TaskExecStdoutConfig_TASK_EXEC_STDOUT_CONFIG_DEVNULL TaskExecStdoutConfig = 0
	// The output will be streamed to the client.
	TaskExecStdoutConfig_TASK_EXEC_STDOUT_CONFIG_PIPE TaskExecStdoutConfig = 1
)

// Enum value maps for TaskExecStdoutConfig.
var (
	TaskExecStdoutConfig_name = map[int32]string{
		0: "TASK_EXEC_STDOUT_CONFIG_DEVNULL",
		1: "TASK_EXEC_STDOUT_CONFIG_PIPE",
	}
	TaskExecStdoutConfig_value = map[string]int32{
		"TASK_EXEC_STDOUT_CONFIG_DEVNULL": 0,
		"TASK_EXEC_STDOUT_CONFIG_PIPE":    1,
	}
)

func (x TaskExecStdoutConfig) Enum() *TaskExecStdoutConfig {
	p := new(TaskExecStdoutConfig)
	*p = x
	return p
}

func (x TaskExecStdoutConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskExecStdoutConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_modal_proto_task_command_router_proto_enumTypes[2].Descriptor()
}

func (TaskExecStdoutConfig) Type() protoreflect.EnumType {
	return &file_modal_proto_task_command_router_proto_enumTypes[2]
}

func (x TaskExecStdoutConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type TaskExecPollRequest struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TaskId string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3"`
	xxx_hidden_ExecId string                 `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TaskExecPollRequest) Reset() {
	*x = TaskExecPollRequest{}
	mi := &file_modal_proto_task_command_router_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecPollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecPollRequest) ProtoMessage() {}

func (x *TaskExecPollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modal_proto_task_command_router_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskExecPollRequest) GetTaskId() string {
	if x != nil {
		return x.xxx_hidden_TaskId
	}
	return ""
}

func (x *TaskExecPollRequest) GetExecId() string {
	if x != nil {
		return x.xxx_hidden_ExecId
	}
	return ""
}

func (x *TaskExecPollRequest) SetTaskId(v string) {
	x.xxx_hidden_TaskId = v
}

func (x *TaskExecPollRequest) SetExecId(v string) {
	x.xxx_hidden_ExecId = v
}

type TaskExecPollRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The ID of the task running the exec'd command.
	TaskId string
	// The execution ID of the command to wait on.
	ExecId string
}

func (b0 TaskExecPollRequest_builder) Build() *TaskExecPollRequest {
	m0 := &TaskExecPollRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TaskId = b.TaskId
	x.xxx_hidden_ExecId = b.ExecId
	return m0
}

// The response to a TaskExecPollRequest. If the exec'd command has not
// completed, exit_status will be unset.
type TaskExecPollResponse struct {
	state                 protoimpl.MessageState            `protogen:"opaque.v1"`
	xxx_hidden_ExitStatus isTaskExecPollResponse_ExitStatus `protobuf_oneof:"exit_status"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TaskExecPollResponse) Reset() {
	*x = TaskExecPollResponse{}
	mi := &file_modal_proto_task_command_router_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecPollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecPollResponse) ProtoMessage() {}

func (x *TaskExecPollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_modal_proto_task_command_router_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskExecPollResponse) GetCode() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_ExitStatus.(*taskExecPollResponse_Code); ok {
			return x.Code
		}
	}
	return 0
}

func (x *TaskExecPollResponse) GetSignal() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_ExitStatus.(*taskExecPollResponse_Signal); ok {
			return x.Signal
		}
	}
	return 0
}

func (x *TaskExecPollResponse) SetCode(v int32) {
	x.xxx_hidden_ExitStatus = &taskExecPollResponse_Code{v}
}

func (x *TaskExecPollResponse) SetSignal(v int32) {
	x.xxx_hidden_ExitStatus = &taskExecPollResponse_Signal{v}
}

func (x *TaskExecPollResponse) HasExitStatus() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ExitStatus != nil
}

func (x *TaskExecPollResponse) HasCode() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_ExitStatus.(*taskExecPollResponse_Code)
	return ok
}

func (x *TaskExecPollResponse) HasSignal() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_ExitStatus.(*taskExecPollResponse_Signal)
	return ok
}

func (x *TaskExecPollResponse) ClearExitStatus() {
	x.xxx_hidden_ExitStatus = nil
}

func (x *TaskExecPollResponse) ClearCode() {
	if _, ok := x.xxx_hidden_ExitStatus.(*taskExecPollResponse_Code); ok {
		x.xxx_hidden_ExitStatus = nil
	}
}

func (x *TaskExecPollResponse) ClearSignal() {
	if _, ok := x.xxx_hidden_ExitStatus.(*taskExecPollResponse_Signal); ok {
		x.xxx_hidden_ExitStatus = nil
	}
}

const TaskExecPollResponse_ExitStatus_not_set_case case_TaskExecPollResponse_ExitStatus = 0
const TaskExecPollResponse_Code_case case_TaskExecPollResponse_ExitStatus = 1
const TaskExecPollResponse_Signal_case case_TaskExecPollResponse_ExitStatus = 2

func (x *TaskExecPollResponse) WhichExitStatus() case_TaskExecPollResponse_ExitStatus {
	if x == nil {
		return TaskExecPollResponse_ExitStatus_not_set_case
	}
	switch x.xxx_hidden_ExitStatus.(type) {
	case *taskExecPollResponse_Code:
		return TaskExecPollResponse_Code_case
	case *taskExecPollResponse_Signal:
		return TaskExecPollResponse_Signal_case
	default:
		return TaskExecPollResponse_ExitStatus_not_set_case
	}
}

type TaskExecPollResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_ExitStatus:
	// The exit code of the command.
	Code *int32
	// The signal that terminated the command.
	Signal *int32
	// -- end of xxx_hidden_ExitStatus
}

func (b0 TaskExecPollResponse_builder) Build() *TaskExecPollResponse {
	m0 := &TaskExecPollResponse{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Code != nil {
		x.xxx_hidden_ExitStatus = &taskExecPollResponse_Code{*b.Code}
	}
	if b.Signal != nil {
		x.xxx_hidden_ExitStatus = &taskExecPollResponse_Signal{*b.Signal}
	}
	return m0
}

type case_TaskExecPollResponse_ExitStatus protoreflect.FieldNumber

func (x case_TaskExecPollResponse_ExitStatus) String() string {
	md := file_modal_proto_task_command_router_proto_msgTypes[1].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isTaskExecPollResponse_ExitStatus interface {
	isTaskExecPollResponse_ExitStatus()
}

type taskExecPollResponse_Code struct {
	// The exit code of the command.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3,oneof"`
}

type taskExecPollResponse_Signal struct {
	// The signal that terminated the command.
	Signal int32 `protobuf:"varint,2,opt,name=signal,proto3,oneof"`
}

func (*taskExecPollResponse_Code) isTaskExecPollResponse_ExitStatus() {}

func (*taskExecPollResponse_Signal) isTaskExecPollResponse_ExitStatus() {}

type TaskExecStartRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TaskId       string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3"`
	xxx_hidden_ExecId       string                 `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3"`
	xxx_hidden_CommandArgs  []string               `protobuf:"bytes,3,rep,name=command_args,json=commandArgs,proto3"`
	xxx_hidden_StdoutConfig TaskExecStdoutConfig   `protobuf:"varint,4,opt,name=stdout_config,json=stdoutConfig,proto3,enum=modal.task_command_router.TaskExecStdoutConfig"`
	xxx_hidden_StderrConfig TaskExecStderrConfig   `protobuf:"varint,5,opt,name=stderr_config,json=stderrConfig,proto3,enum=modal.task_command_router.TaskExecStderrConfig"`
	xxx_hidden_TimeoutSecs  uint32                 `protobuf:"varint,6,opt,name=timeout_secs,json=timeoutSecs,proto3,oneof"`
	xxx_hidden_Workdir      *string                `protobuf:"bytes,7,opt,name=workdir,proto3,oneof"`
	xxx_hidden_SecretIds    []string               `protobuf:"bytes,8,rep,name=secret_ids,json=secretIds,proto3"`
	xxx_hidden_PtyInfo      *PTYInfo               `protobuf:"bytes,9,opt,name=pty_info,json=ptyInfo,proto3,oneof"`
	xxx_hidden_RuntimeDebug bool                   `protobuf:"varint,10,opt,name=runtime_debug,json=runtimeDebug,proto3"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TaskExecStartRequest) Reset() {
	*x = TaskExecStartRequest{}
	mi := &file_modal_proto_task_command_router_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecStartRequest) ProtoMessage() {}

func (x *TaskExecStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modal_proto_task_command_router_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskExecStartRequest) GetTaskId() string {
	if x != nil {
		return x.xxx_hidden_TaskId
	}
	return ""
}

func (x *TaskExecStartRequest) GetExecId() string {
	if x != nil {
		return x.xxx_hidden_ExecId
	}
	return ""
}

func (x *TaskExecStartRequest) GetCommandArgs() []string {
	if x != nil {
		return x.xxx_hidden_CommandArgs
	}
	return nil
}

func (x *TaskExecStartRequest) GetStdoutConfig() TaskExecStdoutConfig {
	if x != nil {
		return x.xxx_hidden_StdoutConfig
	}
	return TaskExecStdoutConfig_TASK_EXEC_STDOUT_CONFIG_DEVNULL
}

func (x *TaskExecStartRequest) GetStderrConfig() TaskExecStderrConfig {
	if x != nil {
		return x.xxx_hidden_StderrConfig
	}
	return TaskExecStderrConfig_TASK_EXEC_STDERR_CONFIG_DEVNULL
}

func (x *TaskExecStartRequest) GetTimeoutSecs() uint32 {
	if x != nil {
		return x.xxx_hidden_TimeoutSecs
	}
	return 0
}

func (x *TaskExecStartRequest) GetWorkdir() string {
	if x != nil {
		if x.xxx_hidden_Workdir != nil {
			return *x.xxx_hidden_Workdir
		}
		return ""
	}
	return ""
}

func (x *TaskExecStartRequest) GetSecretIds() []string {
	if x != nil {
		return x.xxx_hidden_SecretIds
	}
	return nil
}

func (x *TaskExecStartRequest) GetPtyInfo() *PTYInfo {
	if x != nil {
		return x.xxx_hidden_PtyInfo
	}
	return nil
}

func (x *TaskExecStartRequest) GetRuntimeDebug() bool {
	if x != nil {
		return x.xxx_hidden_RuntimeDebug
	}
	return false
}

func (x *TaskExecStartRequest) SetTaskId(v string) {
	x.xxx_hidden_TaskId = v
}

func (x *TaskExecStartRequest) SetExecId(v string) {
	x.xxx_hidden_ExecId = v
}

func (x *TaskExecStartRequest) SetCommandArgs(v []string) {
	x.xxx_hidden_CommandArgs = v
}

func (x *TaskExecStartRequest) SetStdoutConfig(v TaskExecStdoutConfig) {
	x.xxx_hidden_StdoutConfig = v
}

func (x *TaskExecStartRequest) SetStderrConfig(v TaskExecStderrConfig) {
	x.xxx_hidden_StderrConfig = v
}

func (x *TaskExecStartRequest) SetTimeoutSecs(v uint32) {
	x.xxx_hidden_TimeoutSecs = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 10)
}

func (x *TaskExecStartRequest) SetWorkdir(v string) {
	x.xxx_hidden_Workdir = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 10)
}

func (x *TaskExecStartRequest) SetSecretIds(v []string) {
	x.xxx_hidden_SecretIds = v
}

func (x *TaskExecStartRequest) SetPtyInfo(v *PTYInfo) {
	x.xxx_hidden_PtyInfo = v
}

func (x *TaskExecStartRequest) SetRuntimeDebug(v bool) {
	x.xxx_hidden_RuntimeDebug = v
}

func (x *TaskExecStartRequest) HasTimeoutSecs() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *TaskExecStartRequest) HasWorkdir() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *TaskExecStartRequest) HasPtyInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PtyInfo != nil
}

func (x *TaskExecStartRequest) ClearTimeoutSecs() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_TimeoutSecs = 0
}

func (x *TaskExecStartRequest) ClearWorkdir() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Workdir = nil
}

func (x *TaskExecStartRequest) ClearPtyInfo() {
	x.xxx_hidden_PtyInfo = nil
}

type TaskExecStartRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The ID of the task to execute the command in.
	TaskId string
	// Execution ID. This ID will be used to identify the execution for other
	// requests and ensure exec commands are idempotent.
	ExecId string
	// Command arguments to execute.
	CommandArgs []string
	// Configures how the stdout of the command will be handled.
	StdoutConfig TaskExecStdoutConfig
	// Configures how the stderr of the command will be handled.
	StderrConfig TaskExecStderrConfig
	// Timeout in seconds for the exec'd command to exit. If the command does not
	// exit within this duration, the command will be killed. This is NOT the
	// timeout for the ExecStartRequest RPC to complete.
	TimeoutSecs *uint32
	// Working directory for the command.
	Workdir *string
	// Secret IDs to mount into the task.
	SecretIds []string
	// PTY info for the command.
	PtyInfo *PTYInfo
	// Enable debugging capabilities on the container runtime. Used only for
	// internal debugging.
	RuntimeDebug bool
}

func (b0 TaskExecStartRequest_builder) Build() *TaskExecStartRequest {
	m0 := &TaskExecStartRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TaskId = b.TaskId
	x.xxx_hidden_ExecId = b.ExecId
	x.xxx_hidden_CommandArgs = b.CommandArgs
	x.xxx_hidden_StdoutConfig = b.StdoutConfig
	x.xxx_hidden_StderrConfig = b.StderrConfig
	if b.TimeoutSecs != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 10)
		x.xxx_hidden_TimeoutSecs = *b.TimeoutSecs
	}
	if b.Workdir != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 10)
		x.xxx_hidden_Workdir = b.Workdir
	}
	x.xxx_hidden_SecretIds = b.SecretIds
	x.xxx_hidden_PtyInfo = b.PtyInfo
	x.xxx_hidden_RuntimeDebug = b.RuntimeDebug
	return m0
}

type TaskExecStartResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskExecStartResponse) Reset() {
	*x = TaskExecStartResponse{}
	mi := &file_modal_proto_task_command_router_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecStartResponse) ProtoMessage() {}

func (x *TaskExecStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_modal_proto_task_command_router_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type TaskExecStartResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 TaskExecStartResponse_builder) Build() *TaskExecStartResponse {
	m0 := &TaskExecStartResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type TaskExecStdinWriteRequest struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TaskId string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3"`
	xxx_hidden_ExecId string                 `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3"`
	xxx_hidden_Offset uint64                 `protobuf:"varint,3,opt,name=offset,proto3"`
	xxx_hidden_Data   []byte                 `protobuf:"bytes,4,opt,name=data,proto3"`
	xxx_hidden_Eof    bool                   `protobuf:"varint,5,opt,name=eof,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TaskExecStdinWriteRequest) Reset() {
	*x = TaskExecStdinWriteRequest{}
	mi := &file_modal_proto_task_command_router_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecStdinWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecStdinWriteRequest) ProtoMessage() {}

func (x *TaskExecStdinWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modal_proto_task_command_router_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskExecStdinWriteRequest) GetTaskId() string {
	if x != nil {
		return x.xxx_hidden_TaskId
	}
	return ""
}

func (x *TaskExecStdinWriteRequest) GetExecId() string {
	if x != nil {
		return x.xxx_hidden_ExecId
	}
	return ""
}

func (x *TaskExecStdinWriteRequest) GetOffset() uint64 {
	if x != nil {
		return x.xxx_hidden_Offset
	}
	return 0
}

func (x *TaskExecStdinWriteRequest) GetData() []byte {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *TaskExecStdinWriteRequest) GetEof() bool {
	if x != nil {
		return x.xxx_hidden_Eof
	}
	return false
}

func (x *TaskExecStdinWriteRequest) SetTaskId(v string) {
	x.xxx_hidden_TaskId = v
}

func (x *TaskExecStdinWriteRequest) SetExecId(v string) {
	x.xxx_hidden_ExecId = v
}

func (x *TaskExecStdinWriteRequest) SetOffset(v uint64) {
	x.xxx_hidden_Offset = v
}

func (x *TaskExecStdinWriteRequest) SetData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Data = v
}

func (x *TaskExecStdinWriteRequest) SetEof(v bool) {
	x.xxx_hidden_Eof = v
}

type TaskExecStdinWriteRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The ID of the task running the exec'd command.
	TaskId string
	// The execution ID of the command to write to.
	ExecId string
	// The offset to start writing to. This is used to resume writing from the
	// last write position if the connection is closed and reopened.
	Offset uint64
	Data   []byte
	// If true, close the stdin stream after writing any provided data.
	// This signals EOF to the exec'd process.
	Eof bool
}

func (b0 TaskExecStdinWriteRequest_builder) Build() *TaskExecStdinWriteRequest {
	m0 := &TaskExecStdinWriteRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TaskId = b.TaskId
	x.xxx_hidden_ExecId = b.ExecId
	x.xxx_hidden_Offset = b.Offset
	x.xxx_hidden_Data = b.Data
	x.xxx_hidden_Eof = b.Eof
	return m0
}

type TaskExecStdinWriteResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskExecStdinWriteResponse) Reset() {
	*x = TaskExecStdinWriteResponse{}
	mi := &file_modal_proto_task_command_router_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecStdinWriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecStdinWriteResponse) ProtoMessage() {}

func (x *TaskExecStdinWriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_modal_proto_task_command_router_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type TaskExecStdinWriteResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 TaskExecStdinWriteResponse_builder) Build() *TaskExecStdinWriteResponse {
	m0 := &TaskExecStdinWriteResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type TaskExecStdioReadRequest struct {
	state                     protoimpl.MessageState      `protogen:"opaque.v1"`
	xxx_hidden_TaskId         string                      `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3"`
	xxx_hidden_ExecId         string                      `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3"`
	xxx_hidden_Offset         uint64                      `protobuf:"varint,3,opt,name=offset,proto3"`
	xxx_hidden_FileDescriptor TaskExecStdioFileDescriptor `protobuf:"varint,4,opt,name=file_descriptor,json=fileDescriptor,proto3,enum=modal.task_command_router.TaskExecStdioFileDescriptor"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *TaskExecStdioReadRequest) Reset() {
	*x = TaskExecStdioReadRequest{}
	mi := &file_modal_proto_task_command_router_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecStdioReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecStdioReadRequest) ProtoMessage() {}

func (x *TaskExecStdioReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modal_proto_task_command_router_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskExecStdioReadRequest) GetTaskId() string {
	if x != nil {
		return x.xxx_hidden_TaskId
	}
	return ""
}

func (x *TaskExecStdioReadRequest) GetExecId() string {
	if x != nil {
		return x.xxx_hidden_ExecId
	}
	return ""
}

func (x *TaskExecStdioReadRequest) GetOffset() uint64 {
	if x != nil {
		return x.xxx_hidden_Offset
	}
	return 0
}

func (x *TaskExecStdioReadRequest) GetFileDescriptor() TaskExecStdioFileDescriptor {
	if x != nil {
		return x.xxx_hidden_FileDescriptor
	}
	return TaskExecStdioFileDescriptor_TASK_EXEC_STDIO_FILE_DESCRIPTOR_STDOUT
}

func (x *TaskExecStdioReadRequest) SetTaskId(v string) {
	x.xxx_hidden_TaskId = v
}

func (x *TaskExecStdioReadRequest) SetExecId(v string) {
	x.xxx_hidden_ExecId = v
}

func (x *TaskExecStdioReadRequest) SetOffset(v uint64) {
	x.xxx_hidden_Offset = v
}

func (x *TaskExecStdioReadRequest) SetFileDescriptor(v TaskExecStdioFileDescriptor) {
	x.xxx_hidden_FileDescriptor = v
}

type TaskExecStdioReadRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The ID of the task running the exec'd command.
	TaskId string
	// The execution ID of the command to read from.
	ExecId string
	// The offset to start reading from. This is used to resume reading from the
	// last read position if the connection is closed and reopened.
	Offset uint64
	// Which file descriptor to read from.
	FileDescriptor TaskExecStdioFileDescriptor
}

func (b0 TaskExecStdioReadRequest_builder) Build() *TaskExecStdioReadRequest {
	m0 := &TaskExecStdioReadRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TaskId = b.TaskId
	x.xxx_hidden_ExecId = b.ExecId
	x.xxx_hidden_Offset = b.Offset
	x.xxx_hidden_FileDescriptor = b.FileDescriptor
	return m0
}

type TaskExecStdioReadResponse struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data []byte                 `protobuf:"bytes,1,opt,name=data,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TaskExecStdioReadResponse) Reset() {
	*x = TaskExecStdioReadResponse{}
	mi := &file_modal_proto_task_command_router_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecStdioReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecStdioReadResponse) ProtoMessage() {}

func (x *TaskExecStdioReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_modal_proto_task_command_router_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskExecStdioReadResponse) GetData() []byte {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *TaskExecStdioReadResponse) SetData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Data = v
}

type TaskExecStdioReadResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The data read from the file descriptor.
	Data []byte
}

func (b0 TaskExecStdioReadResponse_builder) Build() *TaskExecStdioReadResponse {
	m0 := &TaskExecStdioReadResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Data = b.Data
	return m0
}

type TaskExecWaitRequest struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TaskId string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3"`
	xxx_hidden_ExecId string                 `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TaskExecWaitRequest) Reset() {
	*x = TaskExecWaitRequest{}
	mi := &file_modal_proto_task_command_router_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecWaitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecWaitRequest) ProtoMessage() {}

func (x *TaskExecWaitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modal_proto_task_command_router_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskExecWaitRequest) GetTaskId() string {
	if x != nil {
		return x.xxx_hidden_TaskId
	}
	return ""
}

func (x *TaskExecWaitRequest) GetExecId() string {
	if x != nil {
		return x.xxx_hidden_ExecId
	}
	return ""
}

func (x *TaskExecWaitRequest) SetTaskId(v string) {
	x.xxx_hidden_TaskId = v
}

func (x *TaskExecWaitRequest) SetExecId(v string) {
	x.xxx_hidden_ExecId = v
}

type TaskExecWaitRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The ID of the task running the exec'd command.
	TaskId string
	// The execution ID of the command to wait on.
	ExecId string
}

func (b0 TaskExecWaitRequest_builder) Build() *TaskExecWaitRequest {
	m0 := &TaskExecWaitRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TaskId = b.TaskId
	x.xxx_hidden_ExecId = b.ExecId
	return m0
}

type TaskExecWaitResponse struct {
	state                 protoimpl.MessageState            `protogen:"opaque.v1"`
	xxx_hidden_ExitStatus isTaskExecWaitResponse_ExitStatus `protobuf_oneof:"exit_status"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TaskExecWaitResponse) Reset() {
	*x = TaskExecWaitResponse{}
	mi := &file_modal_proto_task_command_router_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecWaitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecWaitResponse) ProtoMessage() {}

func (x *TaskExecWaitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_modal_proto_task_command_router_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskExecWaitResponse) GetCode() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_ExitStatus.(*taskExecWaitResponse_Code); ok {
			return x.Code
		}
	}
	return 0
}

func (x *TaskExecWaitResponse) GetSignal() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_ExitStatus.(*taskExecWaitResponse_Signal); ok {
			return x.Signal
		}
	}
	return 0
}

func (x *TaskExecWaitResponse) SetCode(v int32) {
	x.xxx_hidden_ExitStatus = &taskExecWaitResponse_Code{v}
}

func (x *TaskExecWaitResponse) SetSignal(v int32) {
	x.xxx_hidden_ExitStatus = &taskExecWaitResponse_Signal{v}
}

func (x *TaskExecWaitResponse) HasExitStatus() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ExitStatus != nil
}

func (x *TaskExecWaitResponse) HasCode() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_ExitStatus.(*taskExecWaitResponse_Code)
	return ok
}

func (x *TaskExecWaitResponse) HasSignal() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_ExitStatus.(*taskExecWaitResponse_Signal)
	return ok
}

func (x *TaskExecWaitResponse) ClearExitStatus() {
	x.xxx_hidden_ExitStatus = nil
}

func (x *TaskExecWaitResponse) ClearCode() {
	if _, ok := x.xxx_hidden_ExitStatus.(*taskExecWaitResponse_Code); ok {
		x.xxx_hidden_ExitStatus = nil
	}
}

func (x *TaskExecWaitResponse) ClearSignal() {
	if _, ok := x.xxx_hidden_ExitStatus.(*taskExecWaitResponse_Signal); ok {
		x.xxx_hidden_ExitStatus = nil
	}
}

const TaskExecWaitResponse_ExitStatus_not_set_case case_TaskExecWaitResponse_ExitStatus = 0
const TaskExecWaitResponse_Code_case case_TaskExecWaitResponse_ExitStatus = 1
const TaskExecWaitResponse_Signal_case case_TaskExecWaitResponse_ExitStatus = 2

func (x *TaskExecWaitResponse) WhichExitStatus() case_TaskExecWaitResponse_ExitStatus {
	if x == nil {
		return TaskExecWaitResponse_ExitStatus_not_set_case
	}
	switch x.xxx_hidden_ExitStatus.(type) {
	case *taskExecWaitResponse_Code:
		return TaskExecWaitResponse_Code_case
	case *taskExecWaitResponse_Signal:
		return TaskExecWaitResponse_Signal_case
	default:
		return TaskExecWaitResponse_ExitStatus_not_set_case
	}
}

type TaskExecWaitResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_ExitStatus:
	// The exit code of the command.
	Code *int32
	// The signal that terminated the command.
	Signal *int32
	// -- end of xxx_hidden_ExitStatus
}

func (b0 TaskExecWaitResponse_builder) Build() *TaskExecWaitResponse {
	m0 := &TaskExecWaitResponse{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Code != nil {
		x.xxx_hidden_ExitStatus = &taskExecWaitResponse_Code{*b.Code}
	}
	if b.Signal != nil {
		x.xxx_hidden_ExitStatus = &taskExecWaitResponse_Signal{*b.Signal}
	}
	return m0
}

type case_TaskExecWaitResponse_ExitStatus protoreflect.FieldNumber

func (x case_TaskExecWaitResponse_ExitStatus) String() string {
	md := file_modal_proto_task_command_router_proto_msgTypes[9].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isTaskExecWaitResponse_ExitStatus interface {
	isTaskExecWaitResponse_ExitStatus()
}

type taskExecWaitResponse_Code struct {
	// The exit code of the command.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3,oneof"`
}

type taskExecWaitResponse_Signal struct {
	// The signal that terminated the command.
	Signal int32 `protobuf:"varint,2,opt,name=signal,proto3,oneof"`
}

func (*taskExecWaitResponse_Code) isTaskExecWaitResponse_ExitStatus() {}

func (*taskExecWaitResponse_Signal) isTaskExecWaitResponse_ExitStatus() {}

var File_modal_proto_task_command_router_proto protoreflect.FileDescriptor

const file_modal_proto_task_command_router_proto_rawDesc = "" +
	"\n" +
	"%modal_proto/task_command_router.proto\x12\x19modal.task_command_router\x1a\x15modal_proto/api.proto\"G\n" +
	"\x13TaskExecPollRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x17\n" +
	"\aexec_id\x18\x02 \x01(\tR\x06execId\"U\n" +
	"\x14TaskExecPollResponse\x12\x14\n" +
	"\x04code\x18\x01 \x01(\x05H\x00R\x04code\x12\x18\n" +
	"\x06signal\x18\x02 \x01(\x05H\x00R\x06signalB\r\n" +
	"\vexit_status\"\x83\x04\n" +
	"\x14TaskExecStartRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x17\n" +
	"\aexec_id\x18\x02 \x01(\tR\x06execId\x12!\n" +
	"\fcommand_args\x18\x03 \x03(\tR\vcommandArgs\x12T\n" +
	"\rstdout_config\x18\x04 \x01(\x0e2/.modal.task_command_router.TaskExecStdoutConfigR\fstdoutConfig\x12T\n" +
	"\rstderr_config\x18\x05 \x01(\x0e2/.modal.task_command_router.TaskExecStderrConfigR\fstderrConfig\x12&\n" +
	"\ftimeout_secs\x18\x06 \x01(\rH\x00R\vtimeoutSecs\x88\x01\x01\x12\x1d\n" +
	"\aworkdir\x18\a \x01(\tH\x01R\aworkdir\x88\x01\x01\x12\x1d\n" +
	"\n" +
	"secret_ids\x18\b \x03(\tR\tsecretIds\x125\n" +
	"\bpty_info\x18\t \x01(\v2\x15.modal.client.PTYInfoH\x02R\aptyInfo\x88\x01\x01\x12#\n" +
	"\rruntime_debug\x18\n" +
	" \x01(\bR\fruntimeDebugB\x0f\n" +
	"\r_timeout_secsB\n" +
	"\n" +
	"\b_workdirB\v\n" +
	"\t_pty_info\"\x17\n" +
	"\x15TaskExecStartResponse\"\x8b\x01\n" +
	"\x19TaskExecStdinWriteRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x17\n" +
	"\aexec_id\x18\x02 \x01(\tR\x06execId\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x04R\x06offset\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\x12\x10\n" +
	"\x03eof\x18\x05 \x01(\bR\x03eof\"\x1c\n" +
	"\x1aTaskExecStdinWriteResponse\"\xc5\x01\n" +
	"\x18TaskExecStdioReadRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x17\n" +
	"\aexec_id\x18\x02 \x01(\tR\x06execId\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x04R\x06offset\x12_\n" +
	"\x0ffile_descriptor\x18\x04 \x01(\x0e26.modal.task_command_router.TaskExecStdioFileDescriptorR\x0efileDescriptor\"/\n" +
	"\x19TaskExecStdioReadResponse\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"G\n" +
	"\x13TaskExecWaitRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x17\n" +
	"\aexec_id\x18\x02 \x01(\tR\x06execId\"U\n" +
	"\x14TaskExecWaitResponse\x12\x14\n" +
	"\x04code\x18\x01 \x01(\x05H\x00R\x04code\x12\x18\n" +
	"\x06signal\x18\x02 \x01(\x05H\x00R\x06signalB\r\n" +
	"\vexit_status*\x81\x01\n" +
	"\x14TaskExecStderrConfig\x12#\n" +
	"\x1fTASK_EXEC_STDERR_CONFIG_DEVNULL\x10\x00\x12 \n" +
	"\x1cTASK_EXEC_STDERR_CONFIG_PIPE\x10\x01\x12\"\n" +
	"\x1eTASK_EXEC_STDERR_CONFIG_STDOUT\x10\x02*u\n" +
	"\x1bTaskExecStdioFileDescriptor\x12*\n" +
	"&TASK_EXEC_STDIO_FILE_DESCRIPTOR_STDOUT\x10\x00\x12*\n" +
	"&TASK_EXEC_STDIO_FILE_DESCRIPTOR_STDERR\x10\x01*]\n" +
	"\x14TaskExecStdoutConfig\x12#\n" +
	"\x1fTASK_EXEC_STDOUT_CONFIG_DEVNULL\x10\x00\x12 \n" +
	"\x1cTASK_EXEC_STDOUT_CONFIG_PIPE\x10\x012\xf0\x04\n" +
	"\x11TaskCommandRouter\x12o\n" +
	"\fTaskExecPoll\x12..modal.task_command_router.TaskExecPollRequest\x1a/.modal.task_command_router.TaskExecPollResponse\x12r\n" +
	"\rTaskExecStart\x12/.modal.task_command_router.TaskExecStartRequest\x1a0.modal.task_command_router.TaskExecStartResponse\x12\x81\x01\n" +
	"\x12TaskExecStdinWrite\x124.modal.task_command_router.TaskExecStdinWriteRequest\x1a5.modal.task_command_router.TaskExecStdinWriteResponse\x12\x80\x01\n" +
	"\x11TaskExecStdioRead\x123.modal.task_command_router.TaskExecStdioReadRequest\x1a4.modal.task_command_router.TaskExecStdioReadResponse0\x01\x12o\n" +
	"\fTaskExecWait\x12..modal.task_command_router.TaskExecWaitRequest\x1a/.modal.task_command_router.TaskExecWaitResponseB&Z$github.com/modal-labs/modal/go/protob\x06proto3"

var file_modal_proto_task_command_router_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_modal_proto_task_command_router_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_modal_proto_task_command_router_proto_goTypes = []any{
	(TaskExecStderrConfig)(0),          // 0: modal.task_command_router.TaskExecStderrConfig
	(TaskExecStdioFileDescriptor)(0),   // 1: modal.task_command_router.TaskExecStdioFileDescriptor
	(TaskExecStdoutConfig)(0),          // 2: modal.task_command_router.TaskExecStdoutConfig
	(*TaskExecPollRequest)(nil),        // 3: modal.task_command_router.TaskExecPollRequest
	(*TaskExecPollResponse)(nil),       // 4: modal.task_command_router.TaskExecPollResponse
	(*TaskExecStartRequest)(nil),       // 5: modal.task_command_router.TaskExecStartRequest
	(*TaskExecStartResponse)(nil),      // 6: modal.task_command_router.TaskExecStartResponse
	(*TaskExecStdinWriteRequest)(nil),  // 7: modal.task_command_router.TaskExecStdinWriteRequest
	(*TaskExecStdinWriteResponse)(nil), // 8: modal.task_command_router.TaskExecStdinWriteResponse
	(*TaskExecStdioReadRequest)(nil),   // 9: modal.task_command_router.TaskExecStdioReadRequest
	(*TaskExecStdioReadResponse)(nil),  // 10: modal.task_command_router.TaskExecStdioReadResponse
	(*TaskExecWaitRequest)(nil),        // 11: modal.task_command_router.TaskExecWaitRequest
	(*TaskExecWaitResponse)(nil),       // 12: modal.task_command_router.TaskExecWaitResponse
	(*PTYInfo)(nil),                    // 13: modal.client.PTYInfo
}
var file_modal_proto_task_command_router_proto_depIdxs = []int32{
	2,  // 0: modal.task_command_router.TaskExecStartRequest.stdout_config:type_name -> modal.task_command_router.TaskExecStdoutConfig
	0,  // 1: modal.task_command_router.TaskExecStartRequest.stderr_config:type_name -> modal.task_command_router.TaskExecStderrConfig
	13, // 2: modal.task_command_router.TaskExecStartRequest.pty_info:type_name -> modal.client.PTYInfo
	1,  // 3: modal.task_command_router.TaskExecStdioReadRequest.file_descriptor:type_name -> modal.task_command_router.TaskExecStdioFileDescriptor
	3,  // 4: modal.task_command_router.TaskCommandRouter.TaskExecPoll:input_type -> modal.task_command_router.TaskExecPollRequest
	5,  // 5: modal.task_command_router.TaskCommandRouter.TaskExecStart:input_type -> modal.task_command_router.TaskExecStartRequest
	7,  // 6: modal.task_command_router.TaskCommandRouter.TaskExecStdinWrite:input_type -> modal.task_command_router.TaskExecStdinWriteRequest
	9,  // 7: modal.task_command_router.TaskCommandRouter.TaskExecStdioRead:input_type -> modal.task_command_router.TaskExecStdioReadRequest
	11, // 8: modal.task_command_router.TaskCommandRouter.TaskExecWait:input_type -> modal.task_command_router.TaskExecWaitRequest
	4,  // 9: modal.task_command_router.TaskCommandRouter.TaskExecPoll:output_type -> modal.task_command_router.TaskExecPollResponse
	6,  // 10: modal.task_command_router.TaskCommandRouter.TaskExecStart:output_type -> modal.task_command_router.TaskExecStartResponse
	8,  // 11: modal.task_command_router.TaskCommandRouter.TaskExecStdinWrite:output_type -> modal.task_command_router.TaskExecStdinWriteResponse
	10, // 12: modal.task_command_router.TaskCommandRouter.TaskExecStdioRead:output_type -> modal.task_command_router.TaskExecStdioReadResponse
	12, // 13: modal.task_command_router.TaskCommandRouter.TaskExecWait:output_type -> modal.task_command_router.TaskExecWaitResponse
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_modal_proto_task_command_router_proto_init() }
func file_modal_proto_task_command_router_proto_init() {
	if File_modal_proto_task_command_router_proto != nil {
		return
	}
	file_modal_proto_api_proto_init()
	file_modal_proto_task_command_router_proto_msgTypes[1].OneofWrappers = []any{
		(*taskExecPollResponse_Code)(nil),
		(*taskExecPollResponse_Signal)(nil),
	}
	file_modal_proto_task_command_router_proto_msgTypes[2].OneofWrappers = []any{}
	file_modal_proto_task_command_router_proto_msgTypes[9].OneofWrappers = []any{
		(*taskExecWaitResponse_Code)(nil),
		(*taskExecWaitResponse_Signal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_modal_proto_task_command_router_proto_rawDesc), len(file_modal_proto_task_command_router_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_modal_proto_task_command_router_proto_goTypes,
		DependencyIndexes: file_modal_proto_task_command_router_proto_depIdxs,
		EnumInfos:         file_modal_proto_task_command_router_proto_enumTypes,
		MessageInfos:      file_modal_proto_task_command_router_proto_msgTypes,
	}.Build()
	File_modal_proto_task_command_router_proto = out.File
	file_modal_proto_task_command_router_proto_goTypes = nil
	file_modal_proto_task_command_router_proto_depIdxs = nil
}
