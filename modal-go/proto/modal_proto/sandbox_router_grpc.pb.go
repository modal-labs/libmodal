// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: modal_proto/sandbox_router.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SandboxRouter_SandboxExecPoll_FullMethodName       = "/modal.sandbox_router.SandboxRouter/SandboxExecPoll"
	SandboxRouter_SandboxExecStart_FullMethodName      = "/modal.sandbox_router.SandboxRouter/SandboxExecStart"
	SandboxRouter_SandboxExecStdinWrite_FullMethodName = "/modal.sandbox_router.SandboxRouter/SandboxExecStdinWrite"
	SandboxRouter_SandboxExecStdioRead_FullMethodName  = "/modal.sandbox_router.SandboxRouter/SandboxExecStdioRead"
	SandboxRouter_SandboxExecWait_FullMethodName       = "/modal.sandbox_router.SandboxRouter/SandboxExecWait"
)

// SandboxRouterClient is the client API for SandboxRouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SandboxRouterClient interface {
	// Poll for the exit status of an exec'd command.
	SandboxExecPoll(ctx context.Context, in *SandboxExecPollRequest, opts ...grpc.CallOption) (*SandboxExecPollResponse, error)
	// Execute a command in the sandbox.
	SandboxExecStart(ctx context.Context, in *SandboxExecStartRequest, opts ...grpc.CallOption) (*SandboxExecStartResponse, error)
	// Write to the stdin stream of an exec'd command.
	SandboxExecStdinWrite(ctx context.Context, in *SandboxExecStdinWriteRequest, opts ...grpc.CallOption) (*SandboxExecStdinWriteResponse, error)
	// Get a stream of output from the stdout or stderr stream of an exec'd command.
	SandboxExecStdioRead(ctx context.Context, in *SandboxExecStdioReadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SandboxExecStdioReadResponse], error)
	// Wait for an exec'd command to exit and return the exit code.
	SandboxExecWait(ctx context.Context, in *SandboxExecWaitRequest, opts ...grpc.CallOption) (*SandboxExecWaitResponse, error)
}

type sandboxRouterClient struct {
	cc grpc.ClientConnInterface
}

func NewSandboxRouterClient(cc grpc.ClientConnInterface) SandboxRouterClient {
	return &sandboxRouterClient{cc}
}

func (c *sandboxRouterClient) SandboxExecPoll(ctx context.Context, in *SandboxExecPollRequest, opts ...grpc.CallOption) (*SandboxExecPollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxExecPollResponse)
	err := c.cc.Invoke(ctx, SandboxRouter_SandboxExecPoll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRouterClient) SandboxExecStart(ctx context.Context, in *SandboxExecStartRequest, opts ...grpc.CallOption) (*SandboxExecStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxExecStartResponse)
	err := c.cc.Invoke(ctx, SandboxRouter_SandboxExecStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRouterClient) SandboxExecStdinWrite(ctx context.Context, in *SandboxExecStdinWriteRequest, opts ...grpc.CallOption) (*SandboxExecStdinWriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxExecStdinWriteResponse)
	err := c.cc.Invoke(ctx, SandboxRouter_SandboxExecStdinWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRouterClient) SandboxExecStdioRead(ctx context.Context, in *SandboxExecStdioReadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SandboxExecStdioReadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SandboxRouter_ServiceDesc.Streams[0], SandboxRouter_SandboxExecStdioRead_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SandboxExecStdioReadRequest, SandboxExecStdioReadResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SandboxRouter_SandboxExecStdioReadClient = grpc.ServerStreamingClient[SandboxExecStdioReadResponse]

func (c *sandboxRouterClient) SandboxExecWait(ctx context.Context, in *SandboxExecWaitRequest, opts ...grpc.CallOption) (*SandboxExecWaitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxExecWaitResponse)
	err := c.cc.Invoke(ctx, SandboxRouter_SandboxExecWait_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SandboxRouterServer is the server API for SandboxRouter service.
// All implementations must embed UnimplementedSandboxRouterServer
// for forward compatibility.
type SandboxRouterServer interface {
	// Poll for the exit status of an exec'd command.
	SandboxExecPoll(context.Context, *SandboxExecPollRequest) (*SandboxExecPollResponse, error)
	// Execute a command in the sandbox.
	SandboxExecStart(context.Context, *SandboxExecStartRequest) (*SandboxExecStartResponse, error)
	// Write to the stdin stream of an exec'd command.
	SandboxExecStdinWrite(context.Context, *SandboxExecStdinWriteRequest) (*SandboxExecStdinWriteResponse, error)
	// Get a stream of output from the stdout or stderr stream of an exec'd command.
	SandboxExecStdioRead(*SandboxExecStdioReadRequest, grpc.ServerStreamingServer[SandboxExecStdioReadResponse]) error
	// Wait for an exec'd command to exit and return the exit code.
	SandboxExecWait(context.Context, *SandboxExecWaitRequest) (*SandboxExecWaitResponse, error)
	mustEmbedUnimplementedSandboxRouterServer()
}

// UnimplementedSandboxRouterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSandboxRouterServer struct{}

func (UnimplementedSandboxRouterServer) SandboxExecPoll(context.Context, *SandboxExecPollRequest) (*SandboxExecPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxExecPoll not implemented")
}
func (UnimplementedSandboxRouterServer) SandboxExecStart(context.Context, *SandboxExecStartRequest) (*SandboxExecStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxExecStart not implemented")
}
func (UnimplementedSandboxRouterServer) SandboxExecStdinWrite(context.Context, *SandboxExecStdinWriteRequest) (*SandboxExecStdinWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxExecStdinWrite not implemented")
}
func (UnimplementedSandboxRouterServer) SandboxExecStdioRead(*SandboxExecStdioReadRequest, grpc.ServerStreamingServer[SandboxExecStdioReadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SandboxExecStdioRead not implemented")
}
func (UnimplementedSandboxRouterServer) SandboxExecWait(context.Context, *SandboxExecWaitRequest) (*SandboxExecWaitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxExecWait not implemented")
}
func (UnimplementedSandboxRouterServer) mustEmbedUnimplementedSandboxRouterServer() {}
func (UnimplementedSandboxRouterServer) testEmbeddedByValue()                       {}

// UnsafeSandboxRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SandboxRouterServer will
// result in compilation errors.
type UnsafeSandboxRouterServer interface {
	mustEmbedUnimplementedSandboxRouterServer()
}

func RegisterSandboxRouterServer(s grpc.ServiceRegistrar, srv SandboxRouterServer) {
	// If the following call pancis, it indicates UnimplementedSandboxRouterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SandboxRouter_ServiceDesc, srv)
}

func _SandboxRouter_SandboxExecPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxExecPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRouterServer).SandboxExecPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRouter_SandboxExecPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRouterServer).SandboxExecPoll(ctx, req.(*SandboxExecPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRouter_SandboxExecStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxExecStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRouterServer).SandboxExecStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRouter_SandboxExecStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRouterServer).SandboxExecStart(ctx, req.(*SandboxExecStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRouter_SandboxExecStdinWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxExecStdinWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRouterServer).SandboxExecStdinWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRouter_SandboxExecStdinWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRouterServer).SandboxExecStdinWrite(ctx, req.(*SandboxExecStdinWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRouter_SandboxExecStdioRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SandboxExecStdioReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SandboxRouterServer).SandboxExecStdioRead(m, &grpc.GenericServerStream[SandboxExecStdioReadRequest, SandboxExecStdioReadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SandboxRouter_SandboxExecStdioReadServer = grpc.ServerStreamingServer[SandboxExecStdioReadResponse]

func _SandboxRouter_SandboxExecWait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxExecWaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRouterServer).SandboxExecWait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRouter_SandboxExecWait_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRouterServer).SandboxExecWait(ctx, req.(*SandboxExecWaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SandboxRouter_ServiceDesc is the grpc.ServiceDesc for SandboxRouter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SandboxRouter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modal.sandbox_router.SandboxRouter",
	HandlerType: (*SandboxRouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SandboxExecPoll",
			Handler:    _SandboxRouter_SandboxExecPoll_Handler,
		},
		{
			MethodName: "SandboxExecStart",
			Handler:    _SandboxRouter_SandboxExecStart_Handler,
		},
		{
			MethodName: "SandboxExecStdinWrite",
			Handler:    _SandboxRouter_SandboxExecStdinWrite_Handler,
		},
		{
			MethodName: "SandboxExecWait",
			Handler:    _SandboxRouter_SandboxExecWait_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SandboxExecStdioRead",
			Handler:       _SandboxRouter_SandboxExecStdioRead_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "modal_proto/sandbox_router.proto",
}
