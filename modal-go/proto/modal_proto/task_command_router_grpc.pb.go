// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: modal_proto/task_command_router.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskCommandRouter_TaskExecPoll_FullMethodName       = "/modal.task_command_router.TaskCommandRouter/TaskExecPoll"
	TaskCommandRouter_TaskExecStart_FullMethodName      = "/modal.task_command_router.TaskCommandRouter/TaskExecStart"
	TaskCommandRouter_TaskExecStdinWrite_FullMethodName = "/modal.task_command_router.TaskCommandRouter/TaskExecStdinWrite"
	TaskCommandRouter_TaskExecStdioRead_FullMethodName  = "/modal.task_command_router.TaskCommandRouter/TaskExecStdioRead"
	TaskCommandRouter_TaskExecWait_FullMethodName       = "/modal.task_command_router.TaskCommandRouter/TaskExecWait"
)

// TaskCommandRouterClient is the client API for TaskCommandRouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskCommandRouterClient interface {
	// Poll for the exit status of an exec'd command.
	TaskExecPoll(ctx context.Context, in *TaskExecPollRequest, opts ...grpc.CallOption) (*TaskExecPollResponse, error)
	// Execute a command in the task.
	TaskExecStart(ctx context.Context, in *TaskExecStartRequest, opts ...grpc.CallOption) (*TaskExecStartResponse, error)
	// Write to the stdin stream of an exec'd command.
	TaskExecStdinWrite(ctx context.Context, in *TaskExecStdinWriteRequest, opts ...grpc.CallOption) (*TaskExecStdinWriteResponse, error)
	// Get a stream of output from the stdout or stderr stream of an exec'd command.
	TaskExecStdioRead(ctx context.Context, in *TaskExecStdioReadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskExecStdioReadResponse], error)
	// Wait for an exec'd command to exit and return the exit code.
	TaskExecWait(ctx context.Context, in *TaskExecWaitRequest, opts ...grpc.CallOption) (*TaskExecWaitResponse, error)
}

type taskCommandRouterClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskCommandRouterClient(cc grpc.ClientConnInterface) TaskCommandRouterClient {
	return &taskCommandRouterClient{cc}
}

func (c *taskCommandRouterClient) TaskExecPoll(ctx context.Context, in *TaskExecPollRequest, opts ...grpc.CallOption) (*TaskExecPollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskExecPollResponse)
	err := c.cc.Invoke(ctx, TaskCommandRouter_TaskExecPoll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskCommandRouterClient) TaskExecStart(ctx context.Context, in *TaskExecStartRequest, opts ...grpc.CallOption) (*TaskExecStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskExecStartResponse)
	err := c.cc.Invoke(ctx, TaskCommandRouter_TaskExecStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskCommandRouterClient) TaskExecStdinWrite(ctx context.Context, in *TaskExecStdinWriteRequest, opts ...grpc.CallOption) (*TaskExecStdinWriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskExecStdinWriteResponse)
	err := c.cc.Invoke(ctx, TaskCommandRouter_TaskExecStdinWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskCommandRouterClient) TaskExecStdioRead(ctx context.Context, in *TaskExecStdioReadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskExecStdioReadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskCommandRouter_ServiceDesc.Streams[0], TaskCommandRouter_TaskExecStdioRead_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TaskExecStdioReadRequest, TaskExecStdioReadResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskCommandRouter_TaskExecStdioReadClient = grpc.ServerStreamingClient[TaskExecStdioReadResponse]

func (c *taskCommandRouterClient) TaskExecWait(ctx context.Context, in *TaskExecWaitRequest, opts ...grpc.CallOption) (*TaskExecWaitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskExecWaitResponse)
	err := c.cc.Invoke(ctx, TaskCommandRouter_TaskExecWait_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskCommandRouterServer is the server API for TaskCommandRouter service.
// All implementations must embed UnimplementedTaskCommandRouterServer
// for forward compatibility.
type TaskCommandRouterServer interface {
	// Poll for the exit status of an exec'd command.
	TaskExecPoll(context.Context, *TaskExecPollRequest) (*TaskExecPollResponse, error)
	// Execute a command in the task.
	TaskExecStart(context.Context, *TaskExecStartRequest) (*TaskExecStartResponse, error)
	// Write to the stdin stream of an exec'd command.
	TaskExecStdinWrite(context.Context, *TaskExecStdinWriteRequest) (*TaskExecStdinWriteResponse, error)
	// Get a stream of output from the stdout or stderr stream of an exec'd command.
	TaskExecStdioRead(*TaskExecStdioReadRequest, grpc.ServerStreamingServer[TaskExecStdioReadResponse]) error
	// Wait for an exec'd command to exit and return the exit code.
	TaskExecWait(context.Context, *TaskExecWaitRequest) (*TaskExecWaitResponse, error)
	mustEmbedUnimplementedTaskCommandRouterServer()
}

// UnimplementedTaskCommandRouterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskCommandRouterServer struct{}

func (UnimplementedTaskCommandRouterServer) TaskExecPoll(context.Context, *TaskExecPollRequest) (*TaskExecPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskExecPoll not implemented")
}
func (UnimplementedTaskCommandRouterServer) TaskExecStart(context.Context, *TaskExecStartRequest) (*TaskExecStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskExecStart not implemented")
}
func (UnimplementedTaskCommandRouterServer) TaskExecStdinWrite(context.Context, *TaskExecStdinWriteRequest) (*TaskExecStdinWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskExecStdinWrite not implemented")
}
func (UnimplementedTaskCommandRouterServer) TaskExecStdioRead(*TaskExecStdioReadRequest, grpc.ServerStreamingServer[TaskExecStdioReadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method TaskExecStdioRead not implemented")
}
func (UnimplementedTaskCommandRouterServer) TaskExecWait(context.Context, *TaskExecWaitRequest) (*TaskExecWaitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskExecWait not implemented")
}
func (UnimplementedTaskCommandRouterServer) mustEmbedUnimplementedTaskCommandRouterServer() {}
func (UnimplementedTaskCommandRouterServer) testEmbeddedByValue()                           {}

// UnsafeTaskCommandRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskCommandRouterServer will
// result in compilation errors.
type UnsafeTaskCommandRouterServer interface {
	mustEmbedUnimplementedTaskCommandRouterServer()
}

func RegisterTaskCommandRouterServer(s grpc.ServiceRegistrar, srv TaskCommandRouterServer) {
	// If the following call pancis, it indicates UnimplementedTaskCommandRouterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskCommandRouter_ServiceDesc, srv)
}

func _TaskCommandRouter_TaskExecPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExecPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCommandRouterServer).TaskExecPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCommandRouter_TaskExecPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCommandRouterServer).TaskExecPoll(ctx, req.(*TaskExecPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskCommandRouter_TaskExecStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExecStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCommandRouterServer).TaskExecStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCommandRouter_TaskExecStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCommandRouterServer).TaskExecStart(ctx, req.(*TaskExecStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskCommandRouter_TaskExecStdinWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExecStdinWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCommandRouterServer).TaskExecStdinWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCommandRouter_TaskExecStdinWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCommandRouterServer).TaskExecStdinWrite(ctx, req.(*TaskExecStdinWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskCommandRouter_TaskExecStdioRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskExecStdioReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskCommandRouterServer).TaskExecStdioRead(m, &grpc.GenericServerStream[TaskExecStdioReadRequest, TaskExecStdioReadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskCommandRouter_TaskExecStdioReadServer = grpc.ServerStreamingServer[TaskExecStdioReadResponse]

func _TaskCommandRouter_TaskExecWait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExecWaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCommandRouterServer).TaskExecWait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCommandRouter_TaskExecWait_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCommandRouterServer).TaskExecWait(ctx, req.(*TaskExecWaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskCommandRouter_ServiceDesc is the grpc.ServiceDesc for TaskCommandRouter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskCommandRouter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modal.task_command_router.TaskCommandRouter",
	HandlerType: (*TaskCommandRouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskExecPoll",
			Handler:    _TaskCommandRouter_TaskExecPoll_Handler,
		},
		{
			MethodName: "TaskExecStart",
			Handler:    _TaskCommandRouter_TaskExecStart_Handler,
		},
		{
			MethodName: "TaskExecStdinWrite",
			Handler:    _TaskCommandRouter_TaskExecStdinWrite_Handler,
		},
		{
			MethodName: "TaskExecWait",
			Handler:    _TaskCommandRouter_TaskExecWait_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TaskExecStdioRead",
			Handler:       _TaskCommandRouter_TaskExecStdioRead_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "modal_proto/task_command_router.proto",
}
